
STM_GameBoy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004264  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004670  08004670  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004670  08004670  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004670  08004670  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df0  2000000c  08004684  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  08004684  00020dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c88  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000292f  00000000  00000000  00031cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  000345f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  00035440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001592a  00000000  00000000  00036130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4c3  00000000  00000000  0004ba5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075f16  00000000  00000000  00057f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cde33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  000cdeb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004358 	.word	0x08004358

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004358 	.word	0x08004358

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2uiz>:
 8000938:	004a      	lsls	r2, r1, #1
 800093a:	d211      	bcs.n	8000960 <__aeabi_d2uiz+0x28>
 800093c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000940:	d211      	bcs.n	8000966 <__aeabi_d2uiz+0x2e>
 8000942:	d50d      	bpl.n	8000960 <__aeabi_d2uiz+0x28>
 8000944:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000948:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800094c:	d40e      	bmi.n	800096c <__aeabi_d2uiz+0x34>
 800094e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000956:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095a:	fa23 f002 	lsr.w	r0, r3, r2
 800095e:	4770      	bx	lr
 8000960:	f04f 0000 	mov.w	r0, #0
 8000964:	4770      	bx	lr
 8000966:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096a:	d102      	bne.n	8000972 <__aeabi_d2uiz+0x3a>
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	4770      	bx	lr
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	4770      	bx	lr

08000978 <draw_line>:

extern Point substract_points(Point a, Point b){
	return (Point){b.x - a.x, b.y - a.y};
}

void draw_line(Point a, Point b){
 8000978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800097c:	b089      	sub	sp, #36	; 0x24
 800097e:	af00      	add	r7, sp, #0
 8000980:	f107 0408 	add.w	r4, r7, #8
 8000984:	e884 0003 	stmia.w	r4, {r0, r1}
 8000988:	4639      	mov	r1, r7
 800098a:	e881 000c 	stmia.w	r1, {r2, r3}
	if(a.x > b.x){
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	dd15      	ble.n	80009c2 <draw_line+0x4a>
		Point c = a;
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	f107 0208 	add.w	r2, r7, #8
 800099e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a2:	e883 0003 	stmia.w	r3, {r0, r1}
		a = b;
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	463a      	mov	r2, r7
 80009ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b0:	e883 0003 	stmia.w	r3, {r0, r1}
		b = c;
 80009b4:	463b      	mov	r3, r7
 80009b6:	f107 0210 	add.w	r2, r7, #16
 80009ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009be:	e883 0003 	stmia.w	r3, {r0, r1}
	}
	int y_0 = a.y - (b.y - a.y)/((b.x - a.x) * 1.) * a.x;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fd13 	bl	80003f0 <__aeabi_i2d>
 80009ca:	4604      	mov	r4, r0
 80009cc:	460d      	mov	r5, r1
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fd0b 	bl	80003f0 <__aeabi_i2d>
 80009da:	4680      	mov	r8, r0
 80009dc:	4689      	mov	r9, r1
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fd03 	bl	80003f0 <__aeabi_i2d>
 80009ea:	4602      	mov	r2, r0
 80009ec:	460b      	mov	r3, r1
 80009ee:	4640      	mov	r0, r8
 80009f0:	4649      	mov	r1, r9
 80009f2:	f7ff fe91 	bl	8000718 <__aeabi_ddiv>
 80009f6:	4602      	mov	r2, r0
 80009f8:	460b      	mov	r3, r1
 80009fa:	4690      	mov	r8, r2
 80009fc:	4699      	mov	r9, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fcf5 	bl	80003f0 <__aeabi_i2d>
 8000a06:	4602      	mov	r2, r0
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4640      	mov	r0, r8
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	f7ff fd59 	bl	80004c4 <__aeabi_dmul>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	4620      	mov	r0, r4
 8000a18:	4629      	mov	r1, r5
 8000a1a:	f7ff fb9b 	bl	8000154 <__aeabi_dsub>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460c      	mov	r4, r1
 8000a22:	4618      	mov	r0, r3
 8000a24:	4621      	mov	r1, r4
 8000a26:	f7ff ff5f 	bl	80008e8 <__aeabi_d2iz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	61bb      	str	r3, [r7, #24]
	for(int i = a.x; i <= b.x; i++){
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	e035      	b.n	8000aa0 <draw_line+0x128>
		lcd_set_point_v(1, i, i * (b.y - a.y)/((b.x - a.x) * 1.) + y_0 );
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	b2dc      	uxtb	r4, r3
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fcd3 	bl	80003f0 <__aeabi_i2d>
 8000a4a:	4605      	mov	r5, r0
 8000a4c:	460e      	mov	r6, r1
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fccb 	bl	80003f0 <__aeabi_i2d>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4628      	mov	r0, r5
 8000a60:	4631      	mov	r1, r6
 8000a62:	f7ff fe59 	bl	8000718 <__aeabi_ddiv>
 8000a66:	4602      	mov	r2, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	4615      	mov	r5, r2
 8000a6c:	461e      	mov	r6, r3
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f7ff fcbe 	bl	80003f0 <__aeabi_i2d>
 8000a74:	4602      	mov	r2, r0
 8000a76:	460b      	mov	r3, r1
 8000a78:	4628      	mov	r0, r5
 8000a7a:	4631      	mov	r1, r6
 8000a7c:	f7ff fb6c 	bl	8000158 <__adddf3>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	4610      	mov	r0, r2
 8000a86:	4619      	mov	r1, r3
 8000a88:	f7ff ff56 	bl	8000938 <__aeabi_d2uiz>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	4621      	mov	r1, r4
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 ff65 	bl	8001964 <lcd_set_point_v>
	for(int i = a.x; i <= b.x; i++){
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	ddc5      	ble.n	8000a34 <draw_line+0xbc>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3724      	adds	r7, #36	; 0x24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ab2 <draw_vertex>:
    lcd_set_point_v(1, a.x - y, a.y + x);
    lcd_set_point_v(1, a.x + y, a.y - x);
    lcd_set_point_v(1, a.x - y, a.y - x);
}

extern void draw_vertex(Point *a, int size){
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < size - 1; i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e00f      	b.n	8000ae2 <draw_vertex+0x30>
		draw_line(a[i], a[i + 1]);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	cb0c      	ldmia	r3, {r2, r3}
 8000ad6:	c903      	ldmia	r1, {r0, r1}
 8000ad8:	f7ff ff4e 	bl	8000978 <draw_line>
	for(int i = 0; i < size - 1; i++){
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbea      	blt.n	8000ac2 <draw_vertex+0x10>
	}
	draw_line(a[0], a[size - 1]);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000af2:	3b01      	subs	r3, #1
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	cb0c      	ldmia	r3, {r2, r3}
 8000afe:	c903      	ldmia	r1, {r0, r1}
 8000b00:	f7ff ff3a 	bl	8000978 <draw_line>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC1_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM4){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d136      	bne.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x80>
		 joy_direction(&move);
 8000b1e:	481e      	ldr	r0, [pc, #120]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b20:	f000 fed2 	bl	80018c8 <joy_direction>

		 if(joystick_button_pressed && HAL_GPIO_ReadPin(JOYSTICK_BUTTON_GPIO_Port, JOYSTICK_BUTTON_Pin)){
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d019      	beq.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x54>
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b30:	f002 f950 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d012      	beq.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x54>
			 joystick_button_toggle = !joystick_button_toggle;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f083 0301 	eor.w	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b56:	701a      	strb	r2, [r3, #0]
			 joystick_button_changed = 1;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e002      	b.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x5a>
		 }
		 else{
			 joystick_button_changed = 0;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		 }
		 joystick_button_pressed = !HAL_GPIO_ReadPin(JOYSTICK_BUTTON_GPIO_Port, JOYSTICK_BUTTON_Pin);
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b6a:	f002 f933 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf0c      	ite	eq
 8000b74:	2301      	moveq	r3, #1
 8000b76:	2300      	movne	r3, #0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b7c:	701a      	strb	r2, [r3, #0]
		 if(system_actual)
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x80>
			 system_actual();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4798      	blx	r3
	 }

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40000800 	.word	0x40000800
 8000b98:	20000028 	.word	0x20000028
 8000b9c:	200002c0 	.word	0x200002c0
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	20000230 	.word	0x20000230
 8000ba8:	2000028c 	.word	0x2000028c
 8000bac:	200002c8 	.word	0x200002c8

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f001 f89a 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f822 	bl	8000c00 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f968 	bl	8000e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc0:	f000 f948 	bl	8000e54 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bc4:	f000 f874 	bl	8000cb0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000bc8:	f000 f8c0 	bl	8000d4c <MX_SPI2_Init>
  MX_TIM4_Init();
 8000bcc:	f000 f8f4 	bl	8000db8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <main+0x40>)
 8000bd2:	f003 f839 	bl	8003c48 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <main+0x44>)
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <main+0x48>)
 8000bdc:	f001 f9c0 	bl	8001f60 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  system_setup();
 8000be0:	f000 fbc0 	bl	8001364 <system_setup>
  while (1)
  {

	  lcd_data(display, sizeof(display));
 8000be4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <main+0x4c>)
 8000bea:	f000 ffd1 	bl	8001b90 <lcd_data>
 8000bee:	e7f9      	b.n	8000be4 <main+0x34>
 8000bf0:	20000824 	.word	0x20000824
 8000bf4:	200002c4 	.word	0x200002c4
 8000bf8:	20000290 	.word	0x20000290
 8000bfc:	20000038 	.word	0x20000038

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fb92 	bl	8004338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c40:	2300      	movs	r3, #0
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c44:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f912 	bl	8002e78 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c5a:	f000 f9a7 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c6a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fb7c 	bl	8003378 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c86:	f000 f991 	bl	8000fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000c8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fcd8 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ca2:	f000 f983 	bl	8000fac <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cdc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ce0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cee:	4815      	ldr	r0, [pc, #84]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cf0:	f001 f85e 	bl	8001db0 <HAL_ADC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cfa:	f000 f957 	bl	8000fac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d06:	2307      	movs	r3, #7
 8000d08:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000d10:	f001 fa20 	bl	8002154 <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 f947 	bl	8000fac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000d2c:	f001 fa12 	bl	8002154 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d36:	f000 f939 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000290 	.word	0x20000290
 8000d48:	40012400 	.word	0x40012400

08000d4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <MX_SPI2_Init+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d98:	220a      	movs	r2, #10
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_SPI2_Init+0x64>)
 8000d9e:	f002 fd0b 	bl	80037b8 <HAL_SPI_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000da8:	f000 f900 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000234 	.word	0x20000234
 8000db4:	40003800 	.word	0x40003800

08000db8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <MX_TIM4_Init+0x98>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000ddc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000de0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000dea:	2232      	movs	r2, #50	; 0x32
 8000dec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000dfe:	f002 fef8 	bl	8003bf2 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000e08:	f000 f8d0 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000e1a:	f003 f840 	bl	8003e9e <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 f8c2 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM4_Init+0x94>)
 8000e36:	f003 fa05 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f8b4 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000824 	.word	0x20000824
 8000e50:	40000800 	.word	0x40000800

08000e54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_DMA_Init+0x38>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200b      	movs	r0, #11
 8000e78:	f001 fc2d 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e7c:	200b      	movs	r0, #11
 8000e7e:	f001 fc46 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_GPIO_Init+0x108>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2101      	movs	r1, #1
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <MX_GPIO_Init+0x10c>)
 8000f0a:	f001 ff7a 	bl	8002e02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	210e      	movs	r1, #14
 8000f12:	4822      	ldr	r0, [pc, #136]	; (8000f9c <MX_GPIO_Init+0x10c>)
 8000f14:	f001 ff75 	bl	8002e02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_GPIO_Init+0x110>)
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481b      	ldr	r0, [pc, #108]	; (8000f9c <MX_GPIO_Init+0x10c>)
 8000f2e:	f001 fdf7 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin;
 8000f32:	230f      	movs	r3, #15
 8000f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <MX_GPIO_Init+0x10c>)
 8000f4a:	f001 fde9 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <MX_GPIO_Init+0x114>)
 8000f62:	f001 fddd 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOYSTICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BUTTON_Pin;
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOYSTICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <MX_GPIO_Init+0x118>)
 8000f7a:	f001 fdd1 	bl	8002b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2028      	movs	r0, #40	; 0x28
 8000f84:	f001 fba7 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f001 fbc0 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	10110000 	.word	0x10110000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <menu_draw>:
#include "menu.h"


void menu_draw(Menu *data){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	lcd_write_line(data->title.name, 0, 0);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fd1c 	bl	8001a08 <lcd_write_line>
	for(uint8_t i = data->visible[0], k = 1; i < data->visible[1]; i++, k++){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3548 	ldrb.w	r3, [r3, #1352]	; 0x548
 8000fd6:	75fb      	strb	r3, [r7, #23]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	75bb      	strb	r3, [r7, #22]
 8000fdc:	e036      	b.n	800104c <menu_draw+0x94>
		lcd_write_long_text(data->data[i].name, k, 0);
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2254      	movs	r2, #84	; 0x54
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3304      	adds	r3, #4
 8000fec:	7db9      	ldrb	r1, [r7, #22]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fd59 	bl	8001aa8 <lcd_write_long_text>
		if(k - 1 + data->visible[0] == data->set){
 8000ff6:	7dbb      	ldrb	r3, [r7, #22]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	f892 2548 	ldrb.w	r2, [r2, #1352]	; 0x548
 8001000:	441a      	add	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 8001008:	429a      	cmp	r2, r3
 800100a:	d119      	bne.n	8001040 <menu_draw+0x88>
			uint8_t* buffer = &display[k * LCD_COL_SIZE];
 800100c:	7dbb      	ldrb	r3, [r7, #22]
 800100e:	2254      	movs	r2, #84	; 0x54
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <menu_draw+0xa8>)
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
			for(int j = 0; j < LCD_COL_SIZE - 5; j++){
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	e00c      	b.n	800103a <menu_draw+0x82>
				buffer[j] = ~buffer[j];
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	68f9      	ldr	r1, [r7, #12]
 800102c:	440b      	add	r3, r1
 800102e:	43d2      	mvns	r2, r2
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < LCD_COL_SIZE - 5; j++){
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3301      	adds	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b4e      	cmp	r3, #78	; 0x4e
 800103e:	ddef      	ble.n	8001020 <menu_draw+0x68>
	for(uint8_t i = data->visible[0], k = 1; i < data->visible[1]; i++, k++){
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	3301      	adds	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	7dbb      	ldrb	r3, [r7, #22]
 8001048:	3301      	adds	r3, #1
 800104a:	75bb      	strb	r3, [r7, #22]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3549 	ldrb.w	r3, [r3, #1353]	; 0x549
 8001052:	7dfa      	ldrb	r2, [r7, #23]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3c2      	bcc.n	8000fde <menu_draw+0x26>
			}
		}
	}
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000038 	.word	0x20000038

08001064 <menu_actual>:

void menu_actual(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static int i = 0;
	static _Bool is_hold = 0;
	if(system_actual){					//is system is initialized
 8001068:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <menu_actual+0xc0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d056      	beq.n	800111e <menu_actual+0xba>
		if(!joystick_button_pressed && joystick_button_changed){
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <menu_actual+0xc4>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00f      	beq.n	800109e <menu_actual+0x3a>
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <menu_actual+0xc8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <menu_actual+0x3a>
			menu_pressed(actual_menu);
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <menu_actual+0xcc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f94b 	bl	8001326 <menu_pressed>
			lcd_clear();
 8001090:	f000 fdb8 	bl	8001c04 <lcd_clear>
			menu_draw(actual_menu);
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <menu_actual+0xcc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff8d 	bl	8000fb8 <menu_draw>
		}

		if(joystick_changed){
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <menu_actual+0xd0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d018      	beq.n	80010d8 <menu_actual+0x74>
			if(joystick_direction.y){
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <menu_actual+0xd4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d010      	beq.n	80010d0 <menu_actual+0x6c>
				is_hold = 1;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <menu_actual+0xd8>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
				menu_change_set(actual_menu, joystick_direction.y);
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <menu_actual+0xcc>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <menu_actual+0xd4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4619      	mov	r1, r3
 80010be:	4610      	mov	r0, r2
 80010c0:	f000 f8a6 	bl	8001210 <menu_change_set>
				menu_draw(actual_menu);
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <menu_actual+0xcc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff75 	bl	8000fb8 <menu_draw>
				menu_draw(actual_menu);
			}
		}

	}
}
 80010ce:	e026      	b.n	800111e <menu_actual+0xba>
			else is_hold = 0;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <menu_actual+0xd8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	e022      	b.n	800111e <menu_actual+0xba>
			if(is_hold)i++;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <menu_actual+0xd8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <menu_actual+0x88>
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <menu_actual+0xdc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <menu_actual+0xdc>)
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e002      	b.n	80010f2 <menu_actual+0x8e>
			else i = 0;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <menu_actual+0xdc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
			if(i == 50){
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <menu_actual+0xdc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b32      	cmp	r3, #50	; 0x32
 80010f8:	d111      	bne.n	800111e <menu_actual+0xba>
				i -= 10;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <menu_actual+0xdc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3b0a      	subs	r3, #10
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <menu_actual+0xdc>)
 8001102:	6013      	str	r3, [r2, #0]
				menu_change_set(actual_menu, joystick_direction.y);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <menu_actual+0xcc>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <menu_actual+0xd4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f000 f87e 	bl	8001210 <menu_change_set>
				menu_draw(actual_menu);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <menu_actual+0xcc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff4d 	bl	8000fb8 <menu_draw>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002c8 	.word	0x200002c8
 8001128:	200002c0 	.word	0x200002c0
 800112c:	2000028c 	.word	0x2000028c
 8001130:	20000df4 	.word	0x20000df4
 8001134:	200002cc 	.word	0x200002cc
 8001138:	200002d0 	.word	0x200002d0
 800113c:	20000030 	.word	0x20000030
 8001140:	20000034 	.word	0x20000034

08001144 <menu_set>:

void menu_set(Menu *data, char *title, char items[][15], uint8_t size, _Bool * settable, void (*pointers[])()){
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	70fb      	strb	r3, [r7, #3]
	data->size = size;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	78fa      	ldrb	r2, [r7, #3]
 8001156:	701a      	strb	r2, [r3, #0]
	strcpy(data->title.name ,title);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	4618      	mov	r0, r3
 8001162:	f003 f8f1 	bl	8004348 <strcpy>
	for(uint8_t i = 0;i < size; i++){
 8001166:	2300      	movs	r3, #0
 8001168:	75fb      	strb	r3, [r7, #23]
 800116a:	e02c      	b.n	80011c6 <menu_set+0x82>
		strcpy(data->data[i].name, *(items + i));
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2254      	movs	r2, #84	; 0x54
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	1d18      	adds	r0, r3, #4
 800117a:	7dfa      	ldrb	r2, [r7, #23]
 800117c:	4613      	mov	r3, r2
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f003 f8de 	bl	8004348 <strcpy>
		data->data[i].settable = settable[i];
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	441a      	add	r2, r3
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	7810      	ldrb	r0, [r2, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	2154      	movs	r1, #84	; 0x54
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	3353      	adds	r3, #83	; 0x53
 80011a2:	4602      	mov	r2, r0
 80011a4:	701a      	strb	r2, [r3, #0]
		data->data[i].fun = pointers[i];
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ac:	441a      	add	r2, r3
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	68f9      	ldr	r1, [r7, #12]
 80011b4:	2054      	movs	r0, #84	; 0x54
 80011b6:	fb00 f303 	mul.w	r3, r0, r3
 80011ba:	440b      	add	r3, r1
 80011bc:	3354      	adds	r3, #84	; 0x54
 80011be:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i < size; i++){
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	3301      	adds	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3ce      	bcc.n	800116c <menu_set+0x28>
	}
	for(uint8_t i = 0; i < size; i++){
 80011ce:	2300      	movs	r3, #0
 80011d0:	75bb      	strb	r3, [r7, #22]
 80011d2:	e00d      	b.n	80011f0 <menu_set+0xac>
		if(settable[i]){
 80011d4:	7dbb      	ldrb	r3, [r7, #22]
 80011d6:	6a3a      	ldr	r2, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <menu_set+0xa6>
			data->set = i;
 80011e0:	7dba      	ldrb	r2, [r7, #22]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
			break;
 80011e8:	e006      	b.n	80011f8 <menu_set+0xb4>
	for(uint8_t i = 0; i < size; i++){
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	3301      	adds	r3, #1
 80011ee:	75bb      	strb	r3, [r7, #22]
 80011f0:	7dba      	ldrb	r2, [r7, #22]
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3ed      	bcc.n	80011d4 <menu_set+0x90>
		}
	}
	data->visible[0] = 0;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
	data->visible[1] = 5;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2205      	movs	r2, #5
 8001204:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <menu_change_set>:



void menu_change_set( Menu * data, int dir){
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	int i = data->set;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 8001220:	60bb      	str	r3, [r7, #8]

	int n = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
	if(dir == 1){
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d124      	bne.n	8001276 <menu_change_set+0x66>
		n = i < (data->size) - 1 ? i + 1 : 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	429a      	cmp	r2, r3
 8001236:	da02      	bge.n	800123e <menu_change_set+0x2e>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	e000      	b.n	8001240 <menu_change_set+0x30>
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
		while(!(data->data[n].settable)){
 8001242:	e00a      	b.n	800125a <menu_change_set+0x4a>
			n++;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
			if(n >= data->size) n = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4293      	cmp	r3, r2
 8001254:	db01      	blt.n	800125a <menu_change_set+0x4a>
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
		while(!(data->data[n].settable)){
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2154      	movs	r1, #84	; 0x54
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	3353      	adds	r3, #83	; 0x53
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e7      	bne.n	8001244 <menu_change_set+0x34>
 8001274:	e025      	b.n	80012c2 <menu_change_set+0xb2>
		}
	}
	else if(dir == -1){
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d121      	bne.n	80012c2 <menu_change_set+0xb2>
		n = i > 0 ? i - 1 : (data->size) - 1;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd02      	ble.n	800128a <menu_change_set+0x7a>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	3b01      	subs	r3, #1
 8001288:	e002      	b.n	8001290 <menu_change_set+0x80>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3b01      	subs	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
		while(!data->data[n].settable){
 8001292:	e009      	b.n	80012a8 <menu_change_set+0x98>
			n--;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3b01      	subs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
			if(n < 0) n = data->size - 1;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da03      	bge.n	80012a8 <menu_change_set+0x98>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
		while(!data->data[n].settable){
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2154      	movs	r1, #84	; 0x54
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	3353      	adds	r3, #83	; 0x53
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f083 0301 	eor.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e8      	bne.n	8001294 <menu_change_set+0x84>
		}
	}
	data->set = n;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	if(n >= data->visible[1]){
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3549 	ldrb.w	r3, [r3, #1353]	; 0x549
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4293      	cmp	r3, r2
 80012d6:	db0e      	blt.n	80012f6 <menu_change_set+0xe6>
		data->visible[1] = n + 1;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
		data->visible[0] = n - 4;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3b04      	subs	r3, #4
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
	}
	else if( n < data->visible[0]){
		data->visible[0] = n;
		data->visible[1] = n + 5;
	}
}
 80012f4:	e012      	b.n	800131c <menu_change_set+0x10c>
	else if( n < data->visible[0]){
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3548 	ldrb.w	r3, [r3, #1352]	; 0x548
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4293      	cmp	r3, r2
 8001302:	da0b      	bge.n	800131c <menu_change_set+0x10c>
		data->visible[0] = n;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
		data->visible[1] = n + 5;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3305      	adds	r3, #5
 8001314:	b2da      	uxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <menu_pressed>:

extern void menu_pressed(Menu * data){
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	if(data->data[data->set].fun)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	2154      	movs	r1, #84	; 0x54
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	4413      	add	r3, r2
 800133e:	3354      	adds	r3, #84	; 0x54
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00a      	beq.n	800135c <menu_pressed+0x36>
		data->data[data->set].fun();
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	2154      	movs	r1, #84	; 0x54
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	4413      	add	r3, r2
 8001356:	3354      	adds	r3, #84	; 0x54
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4798      	blx	r3
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <system_setup>:
 *      Author: Gabriel
 */

#include "run.h"

void system_setup(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	system_actual = menu_actual;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <system_setup+0x1c>)
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <system_setup+0x20>)
 800136c:	601a      	str	r2, [r3, #0]
	  system_init();
 800136e:	f000 fc33 	bl	8001bd8 <system_init>
	  main_menu_init();
 8001372:	f000 f809 	bl	8001388 <main_menu_init>
	  snake_menu_init();
 8001376:	f000 f8a1 	bl	80014bc <snake_menu_init>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002c8 	.word	0x200002c8
 8001384:	08001065 	.word	0x08001065

08001388 <main_menu_init>:

void main_menu_init(){
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b0ab      	sub	sp, #172	; 0xac
 800138c:	af02      	add	r7, sp, #8
	char game_list[7][15];
	strcpy(game_list[0],"Snake         ");
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <main_menu_init+0x104>)
 8001390:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001396:	c407      	stmia	r4!, {r0, r1, r2}
 8001398:	8023      	strh	r3, [r4, #0]
 800139a:	3402      	adds	r4, #2
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	7023      	strb	r3, [r4, #0]
	strcpy(game_list[1],"Tetris        ");
 80013a0:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <main_menu_init+0x108>)
 80013a2:	f107 0443 	add.w	r4, r7, #67	; 0x43
 80013a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013a8:	6020      	str	r0, [r4, #0]
 80013aa:	6061      	str	r1, [r4, #4]
 80013ac:	60a2      	str	r2, [r4, #8]
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	789b      	ldrb	r3, [r3, #2]
 80013b2:	81a2      	strh	r2, [r4, #12]
 80013b4:	73a3      	strb	r3, [r4, #14]
	strcpy(game_list[2],"Tic Tac Toe   ");
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <main_menu_init+0x10c>)
 80013b8:	f107 0452 	add.w	r4, r7, #82	; 0x52
 80013bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013be:	6020      	str	r0, [r4, #0]
 80013c0:	6061      	str	r1, [r4, #4]
 80013c2:	60a2      	str	r2, [r4, #8]
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	81a2      	strh	r2, [r4, #12]
 80013ca:	73a3      	strb	r3, [r4, #14]
	strcpy(game_list[3],"Pokemon       ");
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <main_menu_init+0x110>)
 80013ce:	f107 0461 	add.w	r4, r7, #97	; 0x61
 80013d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013d4:	6020      	str	r0, [r4, #0]
 80013d6:	6061      	str	r1, [r4, #4]
 80013d8:	60a2      	str	r2, [r4, #8]
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	81a2      	strh	r2, [r4, #12]
 80013e0:	73a3      	strb	r3, [r4, #14]
	strcpy(game_list[4],"Minesweeper   ");
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <main_menu_init+0x114>)
 80013e4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80013e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ea:	c407      	stmia	r4!, {r0, r1, r2}
 80013ec:	8023      	strh	r3, [r4, #0]
 80013ee:	3402      	adds	r4, #2
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	7023      	strb	r3, [r4, #0]
	strcpy(game_list[5],"Sudoku        ");
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <main_menu_init+0x118>)
 80013f6:	f107 047f 	add.w	r4, r7, #127	; 0x7f
 80013fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013fc:	6020      	str	r0, [r4, #0]
 80013fe:	6061      	str	r1, [r4, #4]
 8001400:	60a2      	str	r2, [r4, #8]
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	81a2      	strh	r2, [r4, #12]
 8001408:	73a3      	strb	r3, [r4, #14]
	strcpy(game_list[6],"Truth or dare ");
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <main_menu_init+0x11c>)
 800140c:	f107 048e 	add.w	r4, r7, #142	; 0x8e
 8001410:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001412:	6020      	str	r0, [r4, #0]
 8001414:	6061      	str	r1, [r4, #4]
 8001416:	60a2      	str	r2, [r4, #8]
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	81a2      	strh	r2, [r4, #12]
 800141e:	73a3      	strb	r3, [r4, #14]
	void (*pointers[7])();
	pointers[0] = snake_menu_set;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <main_menu_init+0x120>)
 8001422:	61bb      	str	r3, [r7, #24]
	pointers[1] = NULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
	pointers[2] = NULL;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
	pointers[3] = NULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
	pointers[4] = NULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
	pointers[5] = NULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
	pointers[6] = NULL;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30

	_Bool set_list[7] = {1, 1, 1, 1, 1, 1, 1};
 800143c:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <main_menu_init+0x124>)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001446:	6018      	str	r0, [r3, #0]
 8001448:	3304      	adds	r3, #4
 800144a:	8019      	strh	r1, [r3, #0]
 800144c:	3302      	adds	r3, #2
 800144e:	0c0a      	lsrs	r2, r1, #16
 8001450:	701a      	strb	r2, [r3, #0]
	char title[15];
	strcpy(title,  "List of games ");
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <main_menu_init+0x128>)
 8001454:	463c      	mov	r4, r7
 8001456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001458:	c407      	stmia	r4!, {r0, r1, r2}
 800145a:	8023      	strh	r3, [r4, #0]
 800145c:	3402      	adds	r4, #2
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	7023      	strb	r3, [r4, #0]
	menu_set(&main_menu, title, game_list, 7, set_list, pointers);
 8001462:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001466:	4639      	mov	r1, r7
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2307      	movs	r3, #7
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <main_menu_init+0x12c>)
 8001478:	f7ff fe64 	bl	8001144 <menu_set>
	actual_menu = &main_menu;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <main_menu_init+0x130>)
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <main_menu_init+0x12c>)
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	37a4      	adds	r7, #164	; 0xa4
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	08004370 	.word	0x08004370
 8001490:	08004380 	.word	0x08004380
 8001494:	08004390 	.word	0x08004390
 8001498:	080043a0 	.word	0x080043a0
 800149c:	080043b0 	.word	0x080043b0
 80014a0:	080043c0 	.word	0x080043c0
 80014a4:	080043d0 	.word	0x080043d0
 80014a8:	080015ad 	.word	0x080015ad
 80014ac:	080043f0 	.word	0x080043f0
 80014b0:	080043e0 	.word	0x080043e0
 80014b4:	200008a8 	.word	0x200008a8
 80014b8:	20000df4 	.word	0x20000df4

080014bc <snake_menu_init>:

void snake_menu_init(){
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b09b      	sub	sp, #108	; 0x6c
 80014c0:	af02      	add	r7, sp, #8

	char items[SNAKE_MENU_SIZE][15];
	strcpy(items[0],"Resume        ");
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <snake_menu_init+0xa4>)
 80014c4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80014c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ca:	c407      	stmia	r4!, {r0, r1, r2}
 80014cc:	8023      	strh	r3, [r4, #0]
 80014ce:	3402      	adds	r4, #2
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	7023      	strb	r3, [r4, #0]
	strcpy(items[1],"Start         ");
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <snake_menu_init+0xa8>)
 80014d6:	f107 0433 	add.w	r4, r7, #51	; 0x33
 80014da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014dc:	6020      	str	r0, [r4, #0]
 80014de:	6061      	str	r1, [r4, #4]
 80014e0:	60a2      	str	r2, [r4, #8]
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	81a2      	strh	r2, [r4, #12]
 80014e8:	73a3      	strb	r3, [r4, #14]
	strcpy(items[2],"Options       ");
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <snake_menu_init+0xac>)
 80014ec:	f107 0442 	add.w	r4, r7, #66	; 0x42
 80014f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014f2:	6020      	str	r0, [r4, #0]
 80014f4:	6061      	str	r1, [r4, #4]
 80014f6:	60a2      	str	r2, [r4, #8]
 80014f8:	881a      	ldrh	r2, [r3, #0]
 80014fa:	789b      	ldrb	r3, [r3, #2]
 80014fc:	81a2      	strh	r2, [r4, #12]
 80014fe:	73a3      	strb	r3, [r4, #14]
	strcpy(items[3],"Exit          ");
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <snake_menu_init+0xb0>)
 8001502:	f107 0451 	add.w	r4, r7, #81	; 0x51
 8001506:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001508:	6020      	str	r0, [r4, #0]
 800150a:	6061      	str	r1, [r4, #4]
 800150c:	60a2      	str	r2, [r4, #8]
 800150e:	881a      	ldrh	r2, [r3, #0]
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	81a2      	strh	r2, [r4, #12]
 8001514:	73a3      	strb	r3, [r4, #14]
	_Bool set_list[SNAKE_MENU_SIZE] = {0, 1, 1, 1};
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <snake_menu_init+0xb4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	623b      	str	r3, [r7, #32]
	char title[15];
	strcpy(title,  "Snake         ");
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <snake_menu_init+0xb8>)
 800151e:	f107 0410 	add.w	r4, r7, #16
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	c407      	stmia	r4!, {r0, r1, r2}
 8001526:	8023      	strh	r3, [r4, #0]
 8001528:	3402      	adds	r4, #2
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	7023      	strb	r3, [r4, #0]
	void (*pointers[SNAKE_MENU_SIZE])();
	pointers[0] = NULL;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
	pointers[1] = snake_new_game;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <snake_menu_init+0xbc>)
 8001534:	607b      	str	r3, [r7, #4]
	pointers[2] = NULL;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
	pointers[3] = exit_game;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <snake_menu_init+0xc0>)
 800153c:	60fb      	str	r3, [r7, #12]
	menu_set(&snake_menu, title, items, SNAKE_MENU_SIZE, set_list, pointers);
 800153e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001542:	f107 0110 	add.w	r1, r7, #16
 8001546:	463b      	mov	r3, r7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2304      	movs	r3, #4
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <snake_menu_init+0xc4>)
 8001554:	f7ff fdf6 	bl	8001144 <menu_set>
}
 8001558:	bf00      	nop
 800155a:	3764      	adds	r7, #100	; 0x64
 800155c:	46bd      	mov	sp, r7
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	080043f8 	.word	0x080043f8
 8001564:	08004408 	.word	0x08004408
 8001568:	08004418 	.word	0x08004418
 800156c:	08004428 	.word	0x08004428
 8001570:	08004438 	.word	0x08004438
 8001574:	08004370 	.word	0x08004370
 8001578:	080015c9 	.word	0x080015c9
 800157c:	08001585 	.word	0x08001585
 8001580:	200002d8 	.word	0x200002d8

08001584 <exit_game>:


void exit_game(){
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	system_actual = menu_actual;
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <exit_game+0x18>)
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <exit_game+0x1c>)
 800158c:	601a      	str	r2, [r3, #0]
	actual_menu = &main_menu;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <exit_game+0x20>)
 8001590:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <exit_game+0x24>)
 8001592:	601a      	str	r2, [r3, #0]

}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	200002c8 	.word	0x200002c8
 80015a0:	08001065 	.word	0x08001065
 80015a4:	20000df4 	.word	0x20000df4
 80015a8:	200008a8 	.word	0x200008a8

080015ac <snake_menu_set>:
 *  Created on: 10 kwi 2020
 *      Author: Gabriel
 */
#include "snake.h"

void snake_menu_set(){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	actual_menu = &snake_menu;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <snake_menu_set+0x14>)
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <snake_menu_set+0x18>)
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000df4 	.word	0x20000df4
 80015c4:	200002d8 	.word	0x200002d8

080015c8 <snake_new_game>:

void snake_new_game(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	system_actual = test_draw;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <snake_new_game+0x14>)
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <snake_new_game+0x18>)
 80015d0:	601a      	str	r2, [r3, #0]
	lcd_clear();
 80015d2:	f000 fb17 	bl	8001c04 <lcd_clear>

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002c8 	.word	0x200002c8
 80015e0:	080015e5 	.word	0x080015e5

080015e4 <test_draw>:

void test_draw(){
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
	lcd_clear();
 80015ea:	f000 fb0b 	bl	8001c04 <lcd_clear>

	Point x = {70,10};
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <test_draw+0x4c>)
 80015f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f8:	e883 0003 	stmia.w	r3, {r0, r1}
	Point y = {20,40};
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <test_draw+0x50>)
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001606:	e883 0003 	stmia.w	r3, {r0, r1}
	Point a[4] = {{70,10}, {20,40},{10,40},{20,10},{10,10}};
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <test_draw+0x54>)
 800160c:	463c      	mov	r4, r7
 800160e:	461d      	mov	r5, r3
 8001610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	draw_vertex(a,4);
 800161c:	463b      	mov	r3, r7
 800161e:	2104      	movs	r1, #4
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fa46 	bl	8000ab2 <draw_vertex>

}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	; 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bdb0      	pop	{r4, r5, r7, pc}
 800162e:	bf00      	nop
 8001630:	0800443c 	.word	0x0800443c
 8001634:	08004444 	.word	0x08004444
 8001638:	0800444c 	.word	0x0800444c

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_MspInit+0x5c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_MspInit+0x5c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x5c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x5c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_MspInit+0x60>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_MspInit+0x60>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_ADC_MspInit+0xbc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d149      	bne.n	8001754 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a26      	ldr	r2, [pc, #152]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 80016f0:	2312      	movs	r3, #18
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f4:	2303      	movs	r3, #3
 80016f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0xc4>)
 8001700:	f001 fa0e 	bl	8002b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_ADC_MspInit+0xcc>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800171e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001722:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800172e:	2220      	movs	r2, #32
 8001730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800173a:	f001 f803 	bl	8002744 <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001744:	f7ff fc32 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800174c:	621a      	str	r2, [r3, #32]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012400 	.word	0x40012400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800
 8001768:	20000864 	.word	0x20000864
 800176c:	40020008 	.word	0x40020008

08001770 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_SPI_MspInit+0x74>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d124      	bne.n	80017da <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_SPI_MspInit+0x78>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_SPI_MspInit+0x78>)
 8001796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179a:	61d3      	str	r3, [r2, #28]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_SPI_MspInit+0x78>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_SPI_MspInit+0x78>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_SPI_MspInit+0x78>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_SPI_MspInit+0x78>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_MOSI_Pin;
 80017c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_SPI_MspInit+0x7c>)
 80017d6:	f001 f9a3 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40003800 	.word	0x40003800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010c00 	.word	0x40010c00

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_TIM_Base_MspInit+0x44>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d113      	bne.n	800182a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_TIM_Base_MspInit+0x48>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	201e      	movs	r0, #30
 8001820:	f000 ff59 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001824:	201e      	movs	r0, #30
 8001826:	f000 ff72 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40000800 	.word	0x40000800
 8001838:	40021000 	.word	0x40021000

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <HardFault_Handler+0x4>

0800184e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <MemManage_Handler+0x4>

08001854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <BusFault_Handler+0x4>

0800185a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <UsageFault_Handler+0x4>

08001860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 fa76 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001896:	f001 f80f 	bl	80028b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000864 	.word	0x20000864

080018a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM4_IRQHandler+0x10>)
 80018aa:	f002 f9f0 	bl	8003c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000824 	.word	0x20000824

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c0:	f001 fab8 	bl	8002e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <joy_direction>:
Point joy_move(){

	return (Point){( joystick[0] - 2048) / 4, (joystick[1] - 2048) / 4};
}

void joy_direction(){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
	Point point;
	if(joystick[0] > 3500) point.x = 1;
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <joy_direction+0x90>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d902      	bls.n	80018e0 <joy_direction+0x18>
 80018da:	2301      	movs	r3, #1
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	e00a      	b.n	80018f6 <joy_direction+0x2e>
	else if(joystick[0] < 500) point.x = -1;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <joy_direction+0x90>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018e8:	d203      	bcs.n	80018f2 <joy_direction+0x2a>
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	e001      	b.n	80018f6 <joy_direction+0x2e>
	else point.x = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]

	if(joystick[1] > 3500) point.y = 1;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <joy_direction+0x90>)
 80018f8:	885b      	ldrh	r3, [r3, #2]
 80018fa:	f640 52ac 	movw	r2, #3500	; 0xdac
 80018fe:	4293      	cmp	r3, r2
 8001900:	d902      	bls.n	8001908 <joy_direction+0x40>
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	e00a      	b.n	800191e <joy_direction+0x56>
	else if(joystick[1] < 500) point.y = -1;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <joy_direction+0x90>)
 800190a:	885b      	ldrh	r3, [r3, #2]
 800190c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001910:	d203      	bcs.n	800191a <joy_direction+0x52>
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	e001      	b.n	800191e <joy_direction+0x56>
	else point.y = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]

	if(point.x != joystick_direction.x || point.y != joystick_direction.y){
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <joy_direction+0x94>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d104      	bne.n	8001932 <joy_direction+0x6a>
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <joy_direction+0x94>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d009      	beq.n	8001946 <joy_direction+0x7e>
		joystick_changed = 1;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <joy_direction+0x98>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
		joystick_direction.x = point.x;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <joy_direction+0x94>)
 800193c:	6013      	str	r3, [r2, #0]
		joystick_direction.y = point.y;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <joy_direction+0x94>)
 8001942:	6053      	str	r3, [r2, #4]
 8001944:	e002      	b.n	800194c <joy_direction+0x84>
	}
	else joystick_changed = 0;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <joy_direction+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200002c4 	.word	0x200002c4
 800195c:	200002d0 	.word	0x200002d0
 8001960:	200002cc 	.word	0x200002cc

08001964 <lcd_set_point_v>:
#include "system.h"


void lcd_set_point_v(_Bool value, uint8_t x, uint8_t y){
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]
	uint8_t actual = display[ x + (y >> 3) * LCD_COL_SIZE];
 8001976:	79ba      	ldrb	r2, [r7, #6]
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	2354      	movs	r3, #84	; 0x54
 8001982:	fb03 f301 	mul.w	r3, r3, r1
 8001986:	4413      	add	r3, r2
 8001988:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <lcd_set_point_v+0xa0>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	73fb      	strb	r3, [r7, #15]

	if(value)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d017      	beq.n	80019c4 <lcd_set_point_v+0x60>
		display[ x + (y >> 3) * LCD_COL_SIZE] = actual | 1 << (0x07 & y);
 8001994:	797b      	ldrb	r3, [r7, #5]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	2201      	movs	r2, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	b25a      	sxtb	r2, r3
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b259      	sxtb	r1, r3
 80019aa:	79ba      	ldrb	r2, [r7, #6]
 80019ac:	797b      	ldrb	r3, [r7, #5]
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	2354      	movs	r3, #84	; 0x54
 80019b6:	fb03 f300 	mul.w	r3, r3, r0
 80019ba:	4413      	add	r3, r2
 80019bc:	b2c9      	uxtb	r1, r1
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <lcd_set_point_v+0xa0>)
 80019c0:	54d1      	strb	r1, [r2, r3]
	else
		display[ x + (y >> 3) * LCD_COL_SIZE] = ~((~actual) | 1 << (0x07 & y))  ;
}
 80019c2:	e01a      	b.n	80019fa <lcd_set_point_v+0x96>
		display[ x + (y >> 3) * LCD_COL_SIZE] = ~((~actual) | 1 << (0x07 & y))  ;
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	b25a      	sxtb	r2, r3
 80019cc:	797b      	ldrb	r3, [r7, #5]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	79b9      	ldrb	r1, [r7, #6]
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	2354      	movs	r3, #84	; 0x54
 80019ec:	fb03 f300 	mul.w	r3, r3, r0
 80019f0:	440b      	add	r3, r1
 80019f2:	43d2      	mvns	r2, r2
 80019f4:	b2d1      	uxtb	r1, r2
 80019f6:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <lcd_set_point_v+0xa0>)
 80019f8:	54d1      	strb	r1, [r2, r3]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000038 	.word	0x20000038

08001a08 <lcd_write_line>:
	else
		display[ point->x + (point->y >> 3) * LCD_COL_SIZE] = ~((~actual) | 1 << (0x07 & point->y))  ;
}


void lcd_write_line(char* data, uint8_t row, uint8_t col){
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
 8001a14:	4613      	mov	r3, r2
 8001a16:	70bb      	strb	r3, [r7, #2]
	if( row < 0){
		data -= row;
		row = 0;
	}

	uint8_t* buffer = &display[row * LCD_COL_SIZE + col];
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	2254      	movs	r2, #84	; 0x54
 8001a1c:	fb02 f203 	mul.w	r2, r2, r3
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <lcd_write_line+0x98>)
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
	while(*(data) && (buffer < &display[(row+1) * LCD_COL_SIZE])){
 8001a2a:	e026      	b.n	8001a7a <lcd_write_line+0x72>
		for(int i = 0 ; i < 5; i++){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	e016      	b.n	8001a60 <lcd_write_line+0x58>
			*buffer++ = font_ASCII[(int)*data - (int)' '][i];
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f1a3 0120 	sub.w	r1, r3, #32
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	1c53      	adds	r3, r2, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <lcd_write_line+0x9c>)
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	18c1      	adds	r1, r0, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	440b      	add	r3, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	7013      	strb	r3, [r2, #0]
			if(!*(data)) break;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <lcd_write_line+0x60>
		for(int i = 0 ; i < 5; i++){
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	dde5      	ble.n	8001a32 <lcd_write_line+0x2a>
 8001a66:	e000      	b.n	8001a6a <lcd_write_line+0x62>
			if(!*(data)) break;
 8001a68:	bf00      	nop
		}
		data++;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
		*buffer++ = 0;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60fa      	str	r2, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	while(*(data) && (buffer < &display[(row+1) * LCD_COL_SIZE])){
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <lcd_write_line+0x8e>
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	3301      	adds	r3, #1
 8001a86:	2254      	movs	r2, #84	; 0x54
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <lcd_write_line+0x98>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3ca      	bcc.n	8001a2c <lcd_write_line+0x24>
	}
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	20000038 	.word	0x20000038
 8001aa4:	08004480 	.word	0x08004480

08001aa8 <lcd_write_long_text>:


void lcd_write_long_text(char* data, uint8_t row, uint8_t col){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
	uint8_t* buffer = &display[row * LCD_COL_SIZE + col];
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	2254      	movs	r2, #84	; 0x54
 8001abc:	fb02 f203 	mul.w	r2, r2, r3
 8001ac0:	78bb      	ldrb	r3, [r7, #2]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <lcd_write_long_text+0x80>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
	while(*(data) && (buffer < &display[LCD_SIZE])){
 8001aca:	e020      	b.n	8001b0e <lcd_write_long_text+0x66>
		for(int i = 0; i < 5; i++){
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	e012      	b.n	8001af8 <lcd_write_long_text+0x50>
			*buffer++ = font_ASCII[(int)*data - (int)' '][i];
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f1a3 0120 	sub.w	r1, r3, #32
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	1c53      	adds	r3, r2, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4812      	ldr	r0, [pc, #72]	; (8001b2c <lcd_write_long_text+0x84>)
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	18c1      	adds	r1, r0, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	440b      	add	r3, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	7013      	strb	r3, [r2, #0]
		for(int i = 0; i < 5; i++){
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3301      	adds	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	dde9      	ble.n	8001ad2 <lcd_write_long_text+0x2a>
		}
		data++;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3301      	adds	r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
		*buffer++ = 0;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60fa      	str	r2, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	while(*(data) && (buffer < &display[LCD_SIZE])){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <lcd_write_long_text+0x76>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <lcd_write_long_text+0x88>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d3d6      	bcc.n	8001acc <lcd_write_long_text+0x24>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000038 	.word	0x20000038
 8001b2c:	08004480 	.word	0x08004480
 8001b30:	20000230 	.word	0x20000230

08001b34 <lcd_reset>:

void lcd_reset(){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <lcd_reset+0x1c>)
 8001b3e:	f001 f960 	bl	8002e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2108      	movs	r1, #8
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <lcd_reset+0x1c>)
 8001b48:	f001 f95b 	bl	8002e02 <HAL_GPIO_WritePin>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40011000 	.word	0x40011000

08001b54 <lcd_cmd>:

void lcd_cmd(uint8_t cmd){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin | LCD_DC_Pin , GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2106      	movs	r1, #6
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <lcd_cmd+0x34>)
 8001b64:	f001 f94d 	bl	8002e02 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001b68:	1df9      	adds	r1, r7, #7
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <lcd_cmd+0x38>)
 8001b72:	f001 fe82 	bl	800387a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin | LCD_DC_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	2106      	movs	r1, #6
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <lcd_cmd+0x34>)
 8001b7c:	f001 f941 	bl	8002e02 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	20000234 	.word	0x20000234

08001b90 <lcd_data>:


void lcd_data(const uint8_t* data, int size){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <lcd_data+0x40>)
 8001ba0:	f001 f92f 	bl	8002e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <lcd_data+0x40>)
 8001baa:	f001 f92a 	bl	8002e02 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, size, HAL_MAX_DELAY);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <lcd_data+0x44>)
 8001bba:	f001 fe5e 	bl	800387a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <lcd_data+0x40>)
 8001bc4:	f001 f91d 	bl	8002e02 <HAL_GPIO_WritePin>

}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	20000234 	.word	0x20000234

08001bd8 <system_init>:

void system_init(){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

	lcd_reset();
 8001bdc:	f7ff ffaa 	bl	8001b34 <lcd_reset>
	lcd_cmd(0x21);
 8001be0:	2021      	movs	r0, #33	; 0x21
 8001be2:	f7ff ffb7 	bl	8001b54 <lcd_cmd>
	lcd_cmd(0x14);
 8001be6:	2014      	movs	r0, #20
 8001be8:	f7ff ffb4 	bl	8001b54 <lcd_cmd>
	lcd_cmd(0x80 | 0x3f);
 8001bec:	20bf      	movs	r0, #191	; 0xbf
 8001bee:	f7ff ffb1 	bl	8001b54 <lcd_cmd>
	lcd_cmd(0x20);
 8001bf2:	2020      	movs	r0, #32
 8001bf4:	f7ff ffae 	bl	8001b54 <lcd_cmd>
	lcd_cmd(0x0c);
 8001bf8:	200c      	movs	r0, #12
 8001bfa:	f7ff ffab 	bl	8001b54 <lcd_cmd>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <lcd_clear>:

void lcd_clear(){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
	for(int i =0; i < LCD_SIZE;i++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	e007      	b.n	8001c20 <lcd_clear+0x1c>
		display[i] = 0x00;
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <lcd_clear+0x30>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < LCD_SIZE;i++)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001c26:	dbf3      	blt.n	8001c10 <lcd_clear+0xc>
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000038 	.word	0x20000038

08001c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <SystemInit+0x5c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <SystemInit+0x5c>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <SystemInit+0x5c>)
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4911      	ldr	r1, [pc, #68]	; (8001c94 <SystemInit+0x5c>)
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <SystemInit+0x60>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <SystemInit+0x5c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <SystemInit+0x5c>)
 8001c5a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <SystemInit+0x5c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SystemInit+0x5c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <SystemInit+0x5c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <SystemInit+0x5c>)
 8001c76:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c7a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SystemInit+0x5c>)
 8001c7e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c82:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SystemInit+0x64>)
 8001c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c8a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000
 8001c98:	f8ff0000 	.word	0xf8ff0000
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ca0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ca2:	e003      	b.n	8001cac <LoopCopyDataInit>

08001ca4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ca6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ca8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001caa:	3104      	adds	r1, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cac:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cb4:	d3f6      	bcc.n	8001ca4 <CopyDataInit>
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cb8:	e002      	b.n	8001cc0 <LoopFillZerobss>

08001cba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cbc:	f842 3b04 	str.w	r3, [r2], #4

08001cc0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cc2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cc4:	d3f9      	bcc.n	8001cba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cc6:	f7ff ffb7 	bl	8001c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f002 fb11 	bl	80042f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cce:	f7fe ff6f 	bl	8000bb0 <main>
  bx lr
 8001cd2:	4770      	bx	lr
  ldr r3, =_sidata
 8001cd4:	08004678 	.word	0x08004678
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ce0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001ce4:	20000dfc 	.word	0x20000dfc

08001ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_2_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_Init+0x28>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_Init+0x28>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 fcdf 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f808 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff fc98 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_InitTick+0x54>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x58>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fcf7 	bl	800272a <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 fcbf 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_InitTick+0x5c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x20>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_IncTick+0x20>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000df8 	.word	0x20000df8

08001d9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <HAL_GetTick+0x10>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000df8 	.word	0x20000df8

08001db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0be      	b.n	8001f50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fc56 	bl	80016a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 faf7 	bl	80023e8 <ADC_ConversionStop_Disable>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 8099 	bne.w	8001f3e <HAL_ADC_Init+0x18e>
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 8095 	bne.w	8001f3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e1c:	f023 0302 	bic.w	r3, r3, #2
 8001e20:	f043 0202 	orr.w	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7b1b      	ldrb	r3, [r3, #12]
 8001e36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e48:	d003      	beq.n	8001e52 <HAL_ADC_Init+0xa2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d102      	bne.n	8001e58 <HAL_ADC_Init+0xa8>
 8001e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_Init+0xaa>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7d1b      	ldrb	r3, [r3, #20]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d119      	bne.n	8001e9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7b1b      	ldrb	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	035a      	lsls	r2, r3, #13
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e00b      	b.n	8001e9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f043 0220 	orr.w	r2, r3, #32
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_ADC_Init+0x1a8>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ecc:	d003      	beq.n	8001ed6 <HAL_ADC_Init+0x126>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d104      	bne.n	8001ee0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	051b      	lsls	r3, r3, #20
 8001ede:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_ADC_Init+0x1ac>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10b      	bne.n	8001f1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f1a:	e018      	b.n	8001f4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f023 0312 	bic.w	r3, r3, #18
 8001f24:	f043 0210 	orr.w	r2, r3, #16
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f3c:	e007      	b.n	8001f4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	ffe1f7fd 	.word	0xffe1f7fd
 8001f5c:	ff1f0efe 	.word	0xff1f0efe

08001f60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a64      	ldr	r2, [pc, #400]	; (8002108 <HAL_ADC_Start_DMA+0x1a8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d004      	beq.n	8001f84 <HAL_ADC_Start_DMA+0x24>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a63      	ldr	r2, [pc, #396]	; (800210c <HAL_ADC_Start_DMA+0x1ac>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d106      	bne.n	8001f92 <HAL_ADC_Start_DMA+0x32>
 8001f84:	4b60      	ldr	r3, [pc, #384]	; (8002108 <HAL_ADC_Start_DMA+0x1a8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 80b3 	bne.w	80020f8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0x40>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e0ae      	b.n	80020fe <HAL_ADC_Start_DMA+0x19e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f9cb 	bl	8002344 <ADC_Enable>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 809a 	bne.w	80020ee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a4e      	ldr	r2, [pc, #312]	; (800210c <HAL_ADC_Start_DMA+0x1ac>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_Start_DMA+0x84>
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <HAL_ADC_Start_DMA+0x1a8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d115      	bne.n	8002010 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d026      	beq.n	800204c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800200e:	e01d      	b.n	800204c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a39      	ldr	r2, [pc, #228]	; (8002108 <HAL_ADC_Start_DMA+0x1a8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_ADC_Start_DMA+0xd0>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a38      	ldr	r2, [pc, #224]	; (800210c <HAL_ADC_Start_DMA+0x1ac>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10d      	bne.n	800204c <HAL_ADC_Start_DMA+0xec>
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_ADC_Start_DMA+0x1a8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002044:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f023 0206 	bic.w	r2, r3, #6
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
 8002064:	e002      	b.n	800206c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <HAL_ADC_Start_DMA+0x1b0>)
 800207a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <HAL_ADC_Start_DMA+0x1b4>)
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <HAL_ADC_Start_DMA+0x1b8>)
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0202 	mvn.w	r2, #2
 8002094:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a18      	ldr	r0, [r3, #32]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	334c      	adds	r3, #76	; 0x4c
 80020b0:	4619      	mov	r1, r3
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f000 fb9f 	bl	80027f8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020c8:	d108      	bne.n	80020dc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020d8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020da:	e00f      	b.n	80020fc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020ea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020ec:	e006      	b.n	80020fc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40012400 	.word	0x40012400
 800210c:	40012800 	.word	0x40012800
 8002110:	0800245d 	.word	0x0800245d
 8002114:	080024d9 	.word	0x080024d9
 8002118:	080024f5 	.word	0x080024f5

0800211c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
	...

08002154 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x20>
 8002170:	2302      	movs	r3, #2
 8002172:	e0dc      	b.n	800232e <HAL_ADC_ConfigChannel+0x1da>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d81c      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3b05      	subs	r3, #5
 8002196:	221f      	movs	r2, #31
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b05      	subs	r3, #5
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34
 80021bc:	e03c      	b.n	8002238 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d81c      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b23      	subs	r3, #35	; 0x23
 80021d8:	221f      	movs	r2, #31
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	4019      	ands	r1, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b23      	subs	r3, #35	; 0x23
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
 80021fe:	e01b      	b.n	8002238 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b41      	subs	r3, #65	; 0x41
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b41      	subs	r3, #65	; 0x41
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d91c      	bls.n	800227a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	3b1e      	subs	r3, #30
 8002252:	2207      	movs	r2, #7
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	4019      	ands	r1, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6898      	ldr	r0, [r3, #8]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	3b1e      	subs	r3, #30
 800226c:	fa00 f203 	lsl.w	r2, r0, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	e019      	b.n	80022ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6919      	ldr	r1, [r3, #16]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	2207      	movs	r2, #7
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	4019      	ands	r1, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6898      	ldr	r0, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	fa00 f203 	lsl.w	r2, r0, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d003      	beq.n	80022be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d132      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_ADC_ConfigChannel+0x1e4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d125      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d126      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d11a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_ADC_ConfigChannel+0x1e8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_ADC_ConfigChannel+0x1ec>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	0c9a      	lsrs	r2, r3, #18
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002304:	e002      	b.n	800230c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3b01      	subs	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x1b2>
 8002312:	e007      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40012400 	.word	0x40012400
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83

08002344 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d039      	beq.n	80023d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <ADC_Enable+0x9c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <ADC_Enable+0xa0>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	0c9b      	lsrs	r3, r3, #18
 800237e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002380:	e002      	b.n	8002388 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800238e:	f7ff fd05 	bl	8001d9c <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002394:	e018      	b.n	80023c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002396:	f7ff fd01 	bl	8001d9c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d911      	bls.n	80023c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f043 0210 	orr.w	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e007      	b.n	80023d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d1df      	bne.n	8002396 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000000 	.word	0x20000000
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d127      	bne.n	8002452 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002412:	f7ff fcc3 	bl	8001d9c <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002418:	e014      	b.n	8002444 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800241a:	f7ff fcbf 	bl	8001d9c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d90d      	bls.n	8002444 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e007      	b.n	8002454 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d0e3      	beq.n	800241a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002472:	2b00      	cmp	r3, #0
 8002474:	d127      	bne.n	80024c6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800248c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002490:	d115      	bne.n	80024be <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002496:	2b00      	cmp	r3, #0
 8002498:	d111      	bne.n	80024be <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff fe2c 	bl	800211c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024c4:	e004      	b.n	80024d0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f7ff fe21 	bl	800212e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fe10 	bl	8002140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4906      	ldr	r1, [pc, #24]	; (80025c0 <__NVIC_EnableIRQ+0x34>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff90 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff2d 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff42 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff90 	bl	8002618 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5f 	bl	80025c4 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff35 	bl	800258c <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e043      	b.n	80027e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_DMA_Init+0xa8>)
 8002762:	4413      	add	r3, r2
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_DMA_Init+0xac>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	009a      	lsls	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_DMA_Init+0xb0>)
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800278e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	bffdfff8 	.word	0xbffdfff8
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Start_IT+0x20>
 8002814:	2302      	movs	r3, #2
 8002816:	e04a      	b.n	80028ae <HAL_DMA_Start_IT+0xb6>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002826:	2b01      	cmp	r3, #1
 8002828:	d13a      	bne.n	80028a0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f938 	bl	8002ac4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 020e 	orr.w	r2, r2, #14
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e00f      	b.n	800288e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0204 	bic.w	r2, r2, #4
 800287c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 020a 	orr.w	r2, r2, #10
 800288c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e005      	b.n	80028ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2204      	movs	r2, #4
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d04f      	beq.n	8002980 <HAL_DMA_IRQHandler+0xc8>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d04a      	beq.n	8002980 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a66      	ldr	r2, [pc, #408]	; (8002aa8 <HAL_DMA_IRQHandler+0x1f0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d029      	beq.n	8002966 <HAL_DMA_IRQHandler+0xae>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_DMA_IRQHandler+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_DMA_IRQHandler+0xaa>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a63      	ldr	r2, [pc, #396]	; (8002ab0 <HAL_DMA_IRQHandler+0x1f8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01a      	beq.n	800295c <HAL_DMA_IRQHandler+0xa4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a62      	ldr	r2, [pc, #392]	; (8002ab4 <HAL_DMA_IRQHandler+0x1fc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d012      	beq.n	8002956 <HAL_DMA_IRQHandler+0x9e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <HAL_DMA_IRQHandler+0x200>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00a      	beq.n	8002950 <HAL_DMA_IRQHandler+0x98>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <HAL_DMA_IRQHandler+0x204>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d102      	bne.n	800294a <HAL_DMA_IRQHandler+0x92>
 8002944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002948:	e00e      	b.n	8002968 <HAL_DMA_IRQHandler+0xb0>
 800294a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800294e:	e00b      	b.n	8002968 <HAL_DMA_IRQHandler+0xb0>
 8002950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002954:	e008      	b.n	8002968 <HAL_DMA_IRQHandler+0xb0>
 8002956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800295a:	e005      	b.n	8002968 <HAL_DMA_IRQHandler+0xb0>
 800295c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002960:	e002      	b.n	8002968 <HAL_DMA_IRQHandler+0xb0>
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	e000      	b.n	8002968 <HAL_DMA_IRQHandler+0xb0>
 8002966:	2304      	movs	r3, #4
 8002968:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <HAL_DMA_IRQHandler+0x208>)
 800296a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8094 	beq.w	8002a9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800297e:	e08e      	b.n	8002a9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2202      	movs	r2, #2
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d056      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x186>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d051      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 020a 	bic.w	r2, r2, #10
 80029b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_DMA_IRQHandler+0x1f0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d029      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x166>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <HAL_DMA_IRQHandler+0x1f4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x162>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a35      	ldr	r2, [pc, #212]	; (8002ab0 <HAL_DMA_IRQHandler+0x1f8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01a      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x15c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <HAL_DMA_IRQHandler+0x1fc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d012      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x156>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_DMA_IRQHandler+0x200>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x150>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a31      	ldr	r2, [pc, #196]	; (8002abc <HAL_DMA_IRQHandler+0x204>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d102      	bne.n	8002a02 <HAL_DMA_IRQHandler+0x14a>
 80029fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a00:	e00e      	b.n	8002a20 <HAL_DMA_IRQHandler+0x168>
 8002a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a06:	e00b      	b.n	8002a20 <HAL_DMA_IRQHandler+0x168>
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	e008      	b.n	8002a20 <HAL_DMA_IRQHandler+0x168>
 8002a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a12:	e005      	b.n	8002a20 <HAL_DMA_IRQHandler+0x168>
 8002a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a18:	e002      	b.n	8002a20 <HAL_DMA_IRQHandler+0x168>
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e000      	b.n	8002a20 <HAL_DMA_IRQHandler+0x168>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_DMA_IRQHandler+0x208>)
 8002a22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d034      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a3c:	e02f      	b.n	8002a9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2208      	movs	r2, #8
 8002a44:	409a      	lsls	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d028      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x1e8>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d023      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020e 	bic.w	r2, r2, #14
 8002a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
    }
  }
  return;
 8002a9e:	bf00      	nop
 8002aa0:	bf00      	nop
}
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40020008 	.word	0x40020008
 8002aac:	4002001c 	.word	0x4002001c
 8002ab0:	40020030 	.word	0x40020030
 8002ab4:	40020044 	.word	0x40020044
 8002ab8:	40020058 	.word	0x40020058
 8002abc:	4002006c 	.word	0x4002006c
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d108      	bne.n	8002b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b02:	e007      	b.n	8002b14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b08b      	sub	sp, #44	; 0x2c
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e127      	b.n	8002d84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b34:	2201      	movs	r2, #1
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f040 8116 	bne.w	8002d7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d034      	beq.n	8002bc4 <HAL_GPIO_Init+0xa4>
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d80d      	bhi.n	8002b7a <HAL_GPIO_Init+0x5a>
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d02b      	beq.n	8002bba <HAL_GPIO_Init+0x9a>
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d804      	bhi.n	8002b70 <HAL_GPIO_Init+0x50>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d031      	beq.n	8002bce <HAL_GPIO_Init+0xae>
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b6e:	e048      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d043      	beq.n	8002bfc <HAL_GPIO_Init+0xdc>
 8002b74:	2b11      	cmp	r3, #17
 8002b76:	d01b      	beq.n	8002bb0 <HAL_GPIO_Init+0x90>
          break;
 8002b78:	e043      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b7a:	4a89      	ldr	r2, [pc, #548]	; (8002da0 <HAL_GPIO_Init+0x280>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d026      	beq.n	8002bce <HAL_GPIO_Init+0xae>
 8002b80:	4a87      	ldr	r2, [pc, #540]	; (8002da0 <HAL_GPIO_Init+0x280>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d806      	bhi.n	8002b94 <HAL_GPIO_Init+0x74>
 8002b86:	4a87      	ldr	r2, [pc, #540]	; (8002da4 <HAL_GPIO_Init+0x284>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d020      	beq.n	8002bce <HAL_GPIO_Init+0xae>
 8002b8c:	4a86      	ldr	r2, [pc, #536]	; (8002da8 <HAL_GPIO_Init+0x288>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01d      	beq.n	8002bce <HAL_GPIO_Init+0xae>
          break;
 8002b92:	e036      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b94:	4a85      	ldr	r2, [pc, #532]	; (8002dac <HAL_GPIO_Init+0x28c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0xae>
 8002b9a:	4a85      	ldr	r2, [pc, #532]	; (8002db0 <HAL_GPIO_Init+0x290>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d016      	beq.n	8002bce <HAL_GPIO_Init+0xae>
 8002ba0:	4a84      	ldr	r2, [pc, #528]	; (8002db4 <HAL_GPIO_Init+0x294>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0xae>
          break;
 8002ba6:	e02c      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	623b      	str	r3, [r7, #32]
          break;
 8002bae:	e028      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	623b      	str	r3, [r7, #32]
          break;
 8002bb8:	e023      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	623b      	str	r3, [r7, #32]
          break;
 8002bc2:	e01e      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	623b      	str	r3, [r7, #32]
          break;
 8002bcc:	e019      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	623b      	str	r3, [r7, #32]
          break;
 8002bda:	e012      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be4:	2308      	movs	r3, #8
 8002be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	611a      	str	r2, [r3, #16]
          break;
 8002bee:	e008      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	615a      	str	r2, [r3, #20]
          break;
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2bff      	cmp	r3, #255	; 0xff
 8002c06:	d801      	bhi.n	8002c0c <HAL_GPIO_Init+0xec>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	e001      	b.n	8002c10 <HAL_GPIO_Init+0xf0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2bff      	cmp	r3, #255	; 0xff
 8002c16:	d802      	bhi.n	8002c1e <HAL_GPIO_Init+0xfe>
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x104>
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	3b08      	subs	r3, #8
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	401a      	ands	r2, r3
 8002c36:	6a39      	ldr	r1, [r7, #32]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8096 	beq.w	8002d7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_GPIO_Init+0x298>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_GPIO_Init+0x298>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6193      	str	r3, [r2, #24]
 8002c5e:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <HAL_GPIO_Init+0x298>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c6a:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_GPIO_Init+0x29c>)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_GPIO_Init+0x2a0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x19e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_GPIO_Init+0x2a4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x19a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_GPIO_Init+0x2a8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x196>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x2ac>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x192>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x1a0>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x1a0>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x1a0>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x1a0>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cd0:	493a      	ldr	r1, [pc, #232]	; (8002dbc <HAL_GPIO_Init+0x29c>)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4938      	ldr	r1, [pc, #224]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
 8002cf6:	e006      	b.n	8002d06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cf8:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4933      	ldr	r1, [pc, #204]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d12:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	492e      	ldr	r1, [pc, #184]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4929      	ldr	r1, [pc, #164]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	4924      	ldr	r1, [pc, #144]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
 8002d46:	e006      	b.n	8002d56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	491f      	ldr	r1, [pc, #124]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	491a      	ldr	r1, [pc, #104]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
 8002d6e:	e006      	b.n	8002d7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4915      	ldr	r1, [pc, #84]	; (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f aed0 	bne.w	8002b34 <HAL_GPIO_Init+0x14>
  }
}
 8002d94:	bf00      	nop
 8002d96:	372c      	adds	r7, #44	; 0x2c
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	10210000 	.word	0x10210000
 8002da4:	10110000 	.word	0x10110000
 8002da8:	10120000 	.word	0x10120000
 8002dac:	10310000 	.word	0x10310000
 8002db0:	10320000 	.word	0x10320000
 8002db4:	10220000 	.word	0x10220000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	40010c00 	.word	0x40010c00
 8002dc8:	40011000 	.word	0x40011000
 8002dcc:	40011400 	.word	0x40011400
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	807b      	strh	r3, [r7, #2]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e12:	787b      	ldrb	r3, [r7, #1]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e1e:	e003      	b.n	8002e28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	041a      	lsls	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f806 	bl	8002e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e26c      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d00c      	beq.n	8002ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea4:	4b8f      	ldr	r3, [pc, #572]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d112      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d168      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e246      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x76>
 8002ee0:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7f      	ldr	r2, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e02e      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x98>
 8002ef6:	4b7b      	ldr	r3, [pc, #492]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a77      	ldr	r2, [pc, #476]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0xbc>
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f34:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6a      	ldr	r2, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe ff22 	bl	8001d9c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe ff1e 	bl	8001d9c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1fa      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe4>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe ff0e 	bl	8001d9c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe ff0a 	bl	8001d9c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1e6      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x10c>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x18c>
 8002fca:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x176>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1ba      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4939      	ldr	r1, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	e03a      	b.n	800307a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe fec3 	bl	8001d9c <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe febf 	bl	8001d9c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e19b      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4927      	ldr	r1, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fea2 	bl	8001d9c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe fe9e 	bl	8001d9c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e17a      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03a      	beq.n	80030fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d019      	beq.n	80030c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe fe82 	bl	8001d9c <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe fe7e 	bl	8001d9c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e15a      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f000 faa8 	bl	8003610 <RCC_Delay>
 80030c0:	e01c      	b.n	80030fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe fe68 	bl	8001d9c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fe64 	bl	8001d9c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d908      	bls.n	80030f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e140      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	42420000 	.word	0x42420000
 80030ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b9e      	ldr	r3, [pc, #632]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e9      	bne.n	80030d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a6 	beq.w	8003256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b97      	ldr	r3, [pc, #604]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b94      	ldr	r3, [pc, #592]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4a93      	ldr	r2, [pc, #588]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	61d3      	str	r3, [r2, #28]
 8003126:	4b91      	ldr	r3, [pc, #580]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b8b      	ldr	r3, [pc, #556]	; (8003370 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a8a      	ldr	r2, [pc, #552]	; (8003370 <HAL_RCC_OscConfig+0x4f8>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe fe25 	bl	8001d9c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe fe21 	bl	8001d9c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0fd      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b81      	ldr	r3, [pc, #516]	; (8003370 <HAL_RCC_OscConfig+0x4f8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x312>
 800317c:	4b7b      	ldr	r3, [pc, #492]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a7a      	ldr	r2, [pc, #488]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6213      	str	r3, [r2, #32]
 8003188:	e02d      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x334>
 8003192:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4a75      	ldr	r2, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	4b73      	ldr	r3, [pc, #460]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a72      	ldr	r2, [pc, #456]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x356>
 80031b4:	4b6d      	ldr	r3, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a6c      	ldr	r2, [pc, #432]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a66      	ldr	r2, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	4b64      	ldr	r3, [pc, #400]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a63      	ldr	r2, [pc, #396]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fdd5 	bl	8001d9c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fdd1 	bl	8001d9c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0ab      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b57      	ldr	r3, [pc, #348]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x37e>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fdbf 	bl	8001d9c <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fdbb 	bl	8001d9c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e095      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b48      	ldr	r3, [pc, #288]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a47      	ldr	r2, [pc, #284]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8081 	beq.w	8003362 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003260:	4b42      	ldr	r3, [pc, #264]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d061      	beq.n	8003330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d146      	bne.n	8003302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_RCC_OscConfig+0x4fc>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fd8f 	bl	8001d9c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fd8b 	bl	8001d9c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e067      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032aa:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	492d      	ldr	r1, [pc, #180]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a19      	ldr	r1, [r3, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	430b      	orrs	r3, r1
 80032ce:	4927      	ldr	r1, [pc, #156]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x4fc>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe fd5f 	bl	8001d9c <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe fd5b 	bl	8001d9c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e037      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x46a>
 8003300:	e02f      	b.n	8003362 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x4fc>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fd48 	bl	8001d9c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fd44 	bl	8001d9c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e020      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x498>
 800332e:	e018      	b.n	8003362 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e013      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_OscConfig+0x4f4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	429a      	cmp	r2, r3
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420060 	.word	0x42420060

08003378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0d0      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d910      	bls.n	80033bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b67      	ldr	r3, [pc, #412]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 0207 	bic.w	r2, r3, #7
 80033a2:	4965      	ldr	r1, [pc, #404]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b63      	ldr	r3, [pc, #396]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0b8      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d4:	4b59      	ldr	r3, [pc, #356]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a58      	ldr	r2, [pc, #352]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ec:	4b53      	ldr	r3, [pc, #332]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f8:	4b50      	ldr	r3, [pc, #320]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	494d      	ldr	r1, [pc, #308]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d040      	beq.n	8003498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d115      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e07f      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e073      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	4b3d      	ldr	r3, [pc, #244]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06b      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4936      	ldr	r1, [pc, #216]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003468:	f7fe fc98 	bl	8001d9c <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fe fc94 	bl	8001d9c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e053      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d210      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	4922      	ldr	r1, [pc, #136]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e032      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4916      	ldr	r1, [pc, #88]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	490e      	ldr	r1, [pc, #56]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003506:	f000 f821 	bl	800354c <HAL_RCC_GetSysClockFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
 800351a:	fa21 f303 	lsr.w	r3, r1, r3
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1cc>)
 8003520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1d0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe fbf6 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40022000 	.word	0x40022000
 800353c:	40021000 	.word	0x40021000
 8003540:	08004660 	.word	0x08004660
 8003544:	20000000 	.word	0x20000000
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800354c:	b490      	push	{r4, r7}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003554:	1d3c      	adds	r4, r7, #4
 8003556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb4>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x40>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x46>
 800358a:	e02d      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800358c:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358e:	623b      	str	r3, [r7, #32]
      break;
 8003590:	e02d      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	0c9b      	lsrs	r3, r3, #18
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800359e:	4413      	add	r3, r2
 80035a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c5b      	lsrs	r3, r3, #17
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035be:	4413      	add	r3, r2
 80035c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ca:	fb02 f203 	mul.w	r2, r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e004      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	623b      	str	r3, [r7, #32]
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ea:	623b      	str	r3, [r7, #32]
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc90      	pop	{r4, r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	0800446c 	.word	0x0800446c
 8003600:	0800447c 	.word	0x0800447c
 8003604:	40021000 	.word	0x40021000
 8003608:	007a1200 	.word	0x007a1200
 800360c:	003d0900 	.word	0x003d0900

08003610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <RCC_Delay+0x34>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <RCC_Delay+0x38>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	0a5b      	lsrs	r3, r3, #9
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800362c:	bf00      	nop
  }
  while (Delay --);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f9      	bne.n	800362c <RCC_Delay+0x1c>
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000000 	.word	0x20000000
 8003648:	10624dd3 	.word	0x10624dd3

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d07d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003668:	2300      	movs	r3, #0
 800366a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4a4b      	ldr	r2, [pc, #300]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003682:	61d3      	str	r3, [r2, #28]
 8003684:	4b49      	ldr	r3, [pc, #292]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d118      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a0:	4b43      	ldr	r3, [pc, #268]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a42      	ldr	r2, [pc, #264]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ac:	f7fe fb76 	bl	8001d9c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	e008      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b4:	f7fe fb72 	bl	8001d9c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e06d      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02e      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d027      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f0:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d014      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fb41 	bl	8001d9c <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fb3d 	bl	8001d9c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e036      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ee      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4917      	ldr	r1, [pc, #92]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	4313      	orrs	r3, r2
 8003750:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	490b      	ldr	r1, [pc, #44]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40007000 	.word	0x40007000
 80037b4:	42420440 	.word	0x42420440

080037b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e053      	b.n	8003872 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fd ffc3 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003800:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	ea42 0103 	orr.w	r1, r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	0c1a      	lsrs	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f002 0204 	and.w	r2, r2, #4
 8003850:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003860:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_SPI_Transmit+0x22>
 8003898:	2302      	movs	r3, #2
 800389a:	e11e      	b.n	8003ada <HAL_SPI_Transmit+0x260>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a4:	f7fe fa7a 	bl	8001d9c <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038be:	e103      	b.n	8003ac8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Transmit+0x52>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d0:	e0fa      	b.n	8003ac8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2203      	movs	r2, #3
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	d107      	bne.n	800392a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003928:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d007      	beq.n	8003948 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003950:	d14b      	bne.n	80039ea <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_SPI_Transmit+0xe6>
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d13e      	bne.n	80039de <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003984:	e02b      	b.n	80039de <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d112      	bne.n	80039ba <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039b8:	e011      	b.n	80039de <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ba:	f7fe f9ef 	bl	8001d9c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d803      	bhi.n	80039d2 <HAL_SPI_Transmit+0x158>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d102      	bne.n	80039d8 <HAL_SPI_Transmit+0x15e>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039dc:	e074      	b.n	8003ac8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ce      	bne.n	8003986 <HAL_SPI_Transmit+0x10c>
 80039e8:	e04c      	b.n	8003a84 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_SPI_Transmit+0x17e>
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d140      	bne.n	8003a7a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a1e:	e02c      	b.n	8003a7a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d113      	bne.n	8003a56 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a54:	e011      	b.n	8003a7a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a56:	f7fe f9a1 	bl	8001d9c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d803      	bhi.n	8003a6e <HAL_SPI_Transmit+0x1f4>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d102      	bne.n	8003a74 <HAL_SPI_Transmit+0x1fa>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a78:	e026      	b.n	8003ac8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1cd      	bne.n	8003a20 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	6839      	ldr	r1, [r7, #0]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f894 	bl	8003bb6 <SPI_EndRxTxTransaction>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e000      	b.n	8003ac8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af2:	e04c      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d048      	beq.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003afc:	f7fe f94e 	bl	8001d9c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13d      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d111      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	d004      	beq.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d107      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d10f      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e00f      	b.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1a3      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af02      	add	r7, sp, #8
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff ff88 	bl	8003ae2 <SPI_WaitFlagStateUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e000      	b.n	8003bea <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e01d      	b.n	8003c40 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd fde9 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 fa0f 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d007      	beq.n	8003c82 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d122      	bne.n	8003cea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d11b      	bne.n	8003cea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0202 	mvn.w	r2, #2
 8003cba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f9a4 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003cd6:	e005      	b.n	8003ce4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f997 	bl	800400c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9a6 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d122      	bne.n	8003d3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d11b      	bne.n	8003d3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f06f 0204 	mvn.w	r2, #4
 8003d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f97a 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003d2a:	e005      	b.n	8003d38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f96d 	bl	800400c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f97c 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d122      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d11b      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0208 	mvn.w	r2, #8
 8003d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2204      	movs	r2, #4
 8003d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f950 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003d7e:	e005      	b.n	8003d8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f943 	bl	800400c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f952 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d122      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d11b      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0210 	mvn.w	r2, #16
 8003db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2208      	movs	r2, #8
 8003dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f926 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003dd2:	e005      	b.n	8003de0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f919 	bl	800400c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f928 	bl	8004030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d10e      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f06f 0201 	mvn.w	r2, #1
 8003e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fc fe7d 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fa50 	bl	80042de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8ec 	bl	8004042 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0220 	mvn.w	r2, #32
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fa1b 	bl	80042cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_ConfigClockSource+0x18>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0a6      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x166>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ed4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003edc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d067      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x120>
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d80b      	bhi.n	8003f0a <HAL_TIM_ConfigClockSource+0x6c>
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d073      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x140>
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d802      	bhi.n	8003f00 <HAL_TIM_ConfigClockSource+0x62>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d06f      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003efe:	e078      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d06c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x140>
 8003f04:	2b30      	cmp	r3, #48	; 0x30
 8003f06:	d06a      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f08:	e073      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f0a:	2b70      	cmp	r3, #112	; 0x70
 8003f0c:	d00d      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x8c>
 8003f0e:	2b70      	cmp	r3, #112	; 0x70
 8003f10:	d804      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x7e>
 8003f12:	2b50      	cmp	r3, #80	; 0x50
 8003f14:	d033      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0xe0>
 8003f16:	2b60      	cmp	r3, #96	; 0x60
 8003f18:	d041      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f1a:	e06a      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d066      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0x152>
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d017      	beq.n	8003f58 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f28:	e063      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f000 f964 	bl	8004206 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
      break;
 8003f56:	e04c      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6899      	ldr	r1, [r3, #8]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f000 f94d 	bl	8004206 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7a:	609a      	str	r2, [r3, #8]
      break;
 8003f7c:	e039      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 f8c4 	bl	8004118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2150      	movs	r1, #80	; 0x50
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f91b 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e029      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 f8e2 	bl	8004174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2160      	movs	r1, #96	; 0x60
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f90b 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e019      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 f8a4 	bl	8004118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f8fb 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e009      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f000 f8f2 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003fee:	e000      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ff0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a29      	ldr	r2, [pc, #164]	; (800410c <TIM_Base_SetConfig+0xb8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00b      	beq.n	8004084 <TIM_Base_SetConfig+0x30>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d007      	beq.n	8004084 <TIM_Base_SetConfig+0x30>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_Base_SetConfig+0x30>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <TIM_Base_SetConfig+0xc0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d108      	bne.n	8004096 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <TIM_Base_SetConfig+0xb8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_Base_SetConfig+0x62>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a18      	ldr	r2, [pc, #96]	; (8004114 <TIM_Base_SetConfig+0xc0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <TIM_Base_SetConfig+0xb8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800

08004118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 030a 	bic.w	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f023 0210 	bic.w	r2, r3, #16
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	031b      	lsls	r3, r3, #12
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b087      	sub	sp, #28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004220:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	021a      	lsls	r2, r3, #8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	431a      	orrs	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4313      	orrs	r3, r2
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	609a      	str	r2, [r3, #8]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e032      	b.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004294:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4313      	orrs	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <__libc_init_array>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	2500      	movs	r5, #0
 80042f4:	4e0c      	ldr	r6, [pc, #48]	; (8004328 <__libc_init_array+0x38>)
 80042f6:	4c0d      	ldr	r4, [pc, #52]	; (800432c <__libc_init_array+0x3c>)
 80042f8:	1ba4      	subs	r4, r4, r6
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	42a5      	cmp	r5, r4
 80042fe:	d109      	bne.n	8004314 <__libc_init_array+0x24>
 8004300:	f000 f82a 	bl	8004358 <_init>
 8004304:	2500      	movs	r5, #0
 8004306:	4e0a      	ldr	r6, [pc, #40]	; (8004330 <__libc_init_array+0x40>)
 8004308:	4c0a      	ldr	r4, [pc, #40]	; (8004334 <__libc_init_array+0x44>)
 800430a:	1ba4      	subs	r4, r4, r6
 800430c:	10a4      	asrs	r4, r4, #2
 800430e:	42a5      	cmp	r5, r4
 8004310:	d105      	bne.n	800431e <__libc_init_array+0x2e>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004318:	4798      	blx	r3
 800431a:	3501      	adds	r5, #1
 800431c:	e7ee      	b.n	80042fc <__libc_init_array+0xc>
 800431e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004322:	4798      	blx	r3
 8004324:	3501      	adds	r5, #1
 8004326:	e7f2      	b.n	800430e <__libc_init_array+0x1e>
 8004328:	08004670 	.word	0x08004670
 800432c:	08004670 	.word	0x08004670
 8004330:	08004670 	.word	0x08004670
 8004334:	08004674 	.word	0x08004674

08004338 <memset>:
 8004338:	4603      	mov	r3, r0
 800433a:	4402      	add	r2, r0
 800433c:	4293      	cmp	r3, r2
 800433e:	d100      	bne.n	8004342 <memset+0xa>
 8004340:	4770      	bx	lr
 8004342:	f803 1b01 	strb.w	r1, [r3], #1
 8004346:	e7f9      	b.n	800433c <memset+0x4>

08004348 <strcpy>:
 8004348:	4603      	mov	r3, r0
 800434a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800434e:	f803 2b01 	strb.w	r2, [r3], #1
 8004352:	2a00      	cmp	r2, #0
 8004354:	d1f9      	bne.n	800434a <strcpy+0x2>
 8004356:	4770      	bx	lr

08004358 <_init>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr

08004364 <_fini>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr
