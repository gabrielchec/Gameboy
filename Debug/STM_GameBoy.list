
STM_GameBoy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003034  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003164  08003164  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003164  08003164  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003164  08003164  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800316c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000014  08003180  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08003180  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3fa  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eef  00000000  00000000  0002c437  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002e328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013615  00000000  00000000  0002fc90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e1a  00000000  00000000  000432a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007252d  00000000  00000000  0004d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf5ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003660  00000000  00000000  000bf668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003128 	.word	0x08003128

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003128 	.word	0x08003128

0800014c <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC1_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
	 if(htim->Instance == TIM4){
 8000154:	68fb      	ldr	r3, [r7, #12]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0d      	ldr	r2, [pc, #52]	; (8000190 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d113      	bne.n	8000186 <HAL_TIM_PeriodElapsedCallback+0x3a>
		 joy_direction(&move);
 800015e:	480d      	ldr	r0, [pc, #52]	; (8000194 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000160:	f000 fb64 	bl	800082c <joy_direction>

		 lcd_set_point_p(1, &position);
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000166:	2001      	movs	r0, #1
 8000168:	f000 fbb4 	bl	80008d4 <lcd_set_point_p>
		position = add_points(&position, &move );
 800016c:	4c0a      	ldr	r4, [pc, #40]	; (8000198 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800016e:	463b      	mov	r3, r7
 8000170:	4a08      	ldr	r2, [pc, #32]	; (8000194 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000172:	4909      	ldr	r1, [pc, #36]	; (8000198 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000174:	4618      	mov	r0, r3
 8000176:	f000 fb93 	bl	80008a0 <add_points>
 800017a:	4622      	mov	r2, r4
 800017c:	463b      	mov	r3, r7
 800017e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000182:	e882 0003 	stmia.w	r2, {r0, r1}
	 }
}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bd90      	pop	{r4, r7, pc}
 800018e:	bf00      	nop
 8000190:	40000800 	.word	0x40000800
 8000194:	20000030 	.word	0x20000030
 8000198:	20000000 	.word	0x20000000

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fcac 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f822 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f968 	bl	800047c <MX_GPIO_Init>
  MX_DMA_Init();
 80001ac:	f000 f948 	bl	8000440 <MX_DMA_Init>
  MX_ADC1_Init();
 80001b0:	f000 f874 	bl	800029c <MX_ADC1_Init>
  MX_SPI2_Init();
 80001b4:	f000 f8c0 	bl	8000338 <MX_SPI2_Init>
  MX_TIM4_Init();
 80001b8:	f000 f8f4 	bl	80003a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80001bc:	4807      	ldr	r0, [pc, #28]	; (80001dc <main+0x40>)
 80001be:	f002 fc33 	bl	8002a28 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, joystick, 2);
 80001c2:	2202      	movs	r2, #2
 80001c4:	4906      	ldr	r1, [pc, #24]	; (80001e0 <main+0x44>)
 80001c6:	4807      	ldr	r0, [pc, #28]	; (80001e4 <main+0x48>)
 80001c8:	f000 fdd2 	bl	8000d70 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  system_init();
 80001cc:	f000 fc26 	bl	8000a1c <system_init>
  {
	  //lcd_set_point(0,x,y);
	  //lcd_set_point(1,33,53);

	  //lcd_write_line(t, 1, 4);
	  lcd_data(display, sizeof(display));
 80001d0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <main+0x4c>)
 80001d6:	f000 fbfd 	bl	80009d4 <lcd_data>
 80001da:	e7f9      	b.n	80001d0 <main+0x34>
 80001dc:	20000288 	.word	0x20000288
 80001e0:	2000033c 	.word	0x2000033c
 80001e4:	200002c8 	.word	0x200002c8
 80001e8:	20000038 	.word	0x20000038

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	; 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 ff8c 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000224:	2310      	movs	r3, #16
 8000226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800022c:	2300      	movs	r3, #0
 800022e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000230:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fd0c 	bl	8001c58 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000246:	f000 f9a5 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000256:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800025a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2101      	movs	r1, #1
 8000266:	4618      	mov	r0, r3
 8000268:	f001 ff76 	bl	8002158 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000272:	f000 f98f 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000276:	2302      	movs	r3, #2
 8000278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800027a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800027e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f8d2 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800028e:	f000 f981 	bl	8000594 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3750      	adds	r7, #80	; 0x50
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <MX_ADC1_Init+0x94>)
 80002ae:	4a21      	ldr	r2, [pc, #132]	; (8000334 <MX_ADC1_Init+0x98>)
 80002b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <MX_ADC1_Init+0x94>)
 80002b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <MX_ADC1_Init+0x94>)
 80002bc:	2201      	movs	r2, #1
 80002be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_ADC1_Init+0x94>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <MX_ADC1_Init+0x94>)
 80002c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_ADC1_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MX_ADC1_Init+0x94>)
 80002d6:	2202      	movs	r2, #2
 80002d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002da:	4815      	ldr	r0, [pc, #84]	; (8000330 <MX_ADC1_Init+0x94>)
 80002dc:	f000 fc70 	bl	8000bc0 <HAL_ADC_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002e6:	f000 f955 	bl	8000594 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002f2:	2307      	movs	r3, #7
 80002f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	480d      	ldr	r0, [pc, #52]	; (8000330 <MX_ADC1_Init+0x94>)
 80002fc:	f000 fe32 	bl	8000f64 <HAL_ADC_ConfigChannel>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000306:	f000 f945 	bl	8000594 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800030a:	2304      	movs	r3, #4
 800030c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800030e:	2302      	movs	r3, #2
 8000310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4619      	mov	r1, r3
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <MX_ADC1_Init+0x94>)
 8000318:	f000 fe24 	bl	8000f64 <HAL_ADC_ConfigChannel>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000322:	f000 f937 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200002c8 	.word	0x200002c8
 8000334:	40012400 	.word	0x40012400

08000338 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_SPI2_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <MX_SPI2_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_SPI2_Init+0x64>)
 8000344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000348:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_SPI2_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_SPI2_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_SPI2_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SPI2_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_SPI2_Init+0x64>)
 8000364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000368:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_SPI2_Init+0x64>)
 800036c:	2208      	movs	r2, #8
 800036e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_SPI2_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_SPI2_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_SPI2_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SPI2_Init+0x64>)
 8000384:	220a      	movs	r2, #10
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_SPI2_Init+0x64>)
 800038a:	f002 f905 	bl	8002598 <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000394:	f000 f8fe 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000230 	.word	0x20000230
 80003a0:	40003800 	.word	0x40003800

080003a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	463b      	mov	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <MX_TIM4_Init+0x94>)
 80003c2:	4a1e      	ldr	r2, [pc, #120]	; (800043c <MX_TIM4_Init+0x98>)
 80003c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <MX_TIM4_Init+0x94>)
 80003c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_TIM4_Init+0x94>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_TIM4_Init+0x94>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_TIM4_Init+0x94>)
 80003dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_TIM4_Init+0x94>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_TIM4_Init+0x94>)
 80003ea:	f002 faf2 	bl	80029d2 <HAL_TIM_Base_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80003f4:	f000 f8ce 	bl	8000594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4619      	mov	r1, r3
 8000404:	480c      	ldr	r0, [pc, #48]	; (8000438 <MX_TIM4_Init+0x94>)
 8000406:	f002 fc3a 	bl	8002c7e <HAL_TIM_ConfigClockSource>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000410:	f000 f8c0 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_TIM4_Init+0x94>)
 8000422:	f002 fdff 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800042c:	f000 f8b2 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000288 	.word	0x20000288
 800043c:	40000800 	.word	0x40000800

08000440 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_DMA_Init+0x38>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <MX_DMA_Init+0x38>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_DMA_Init+0x38>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	200b      	movs	r0, #11
 8000464:	f001 f83f 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000468:	200b      	movs	r0, #11
 800046a:	f001 f858 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000490:	4b3c      	ldr	r3, [pc, #240]	; (8000584 <MX_GPIO_Init+0x108>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a3b      	ldr	r2, [pc, #236]	; (8000584 <MX_GPIO_Init+0x108>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b39      	ldr	r3, [pc, #228]	; (8000584 <MX_GPIO_Init+0x108>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0310 	and.w	r3, r3, #16
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a8:	4b36      	ldr	r3, [pc, #216]	; (8000584 <MX_GPIO_Init+0x108>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a35      	ldr	r2, [pc, #212]	; (8000584 <MX_GPIO_Init+0x108>)
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b33      	ldr	r3, [pc, #204]	; (8000584 <MX_GPIO_Init+0x108>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b30      	ldr	r3, [pc, #192]	; (8000584 <MX_GPIO_Init+0x108>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a2f      	ldr	r2, [pc, #188]	; (8000584 <MX_GPIO_Init+0x108>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <MX_GPIO_Init+0x108>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <MX_GPIO_Init+0x108>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a29      	ldr	r2, [pc, #164]	; (8000584 <MX_GPIO_Init+0x108>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <MX_GPIO_Init+0x108>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	4824      	ldr	r0, [pc, #144]	; (8000588 <MX_GPIO_Init+0x10c>)
 80004f6:	f001 fb75 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	210e      	movs	r1, #14
 80004fe:	4822      	ldr	r0, [pc, #136]	; (8000588 <MX_GPIO_Init+0x10c>)
 8000500:	f001 fb70 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <MX_GPIO_Init+0x110>)
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <MX_GPIO_Init+0x10c>)
 800051a:	f001 fa09 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin;
 800051e:	230f      	movs	r3, #15
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2302      	movs	r3, #2
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <MX_GPIO_Init+0x10c>)
 8000536:	f001 f9fb 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOYSTICK_BUTTON_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BUTTON_Pin;
 800053a:	2301      	movs	r3, #1
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000542:	2302      	movs	r3, #2
 8000544:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOYSTICK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <MX_GPIO_Init+0x114>)
 800054e:	f001 f9ef 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000552:	2308      	movs	r3, #8
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <MX_GPIO_Init+0x114>)
 8000566:	f001 f9e3 	bl	8001930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2028      	movs	r0, #40	; 0x28
 8000570:	f000 ffb9 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000574:	2028      	movs	r0, #40	; 0x28
 8000576:	f000 ffd2 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	10110000 	.word	0x10110000
 8000590:	40010800 	.word	0x40010800

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_MspInit+0x5c>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x60>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_MspInit+0x60>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <HAL_ADC_MspInit+0xbc>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d149      	bne.n	80006b8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_ADC_MspInit+0xc0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 8000654:	2312      	movs	r3, #18
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <HAL_ADC_MspInit+0xc4>)
 8000664:	f001 f964 	bl	8001930 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <HAL_ADC_MspInit+0xcc>)
 800066c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 8000682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000686:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 800068a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800068e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 8000692:	2220      	movs	r2, #32
 8000694:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800069c:	480b      	ldr	r0, [pc, #44]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 800069e:	f000 ff59 	bl	8001554 <HAL_DMA_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006a8:	f7ff ff74 	bl	8000594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 80006b0:	621a      	str	r2, [r3, #32]
 80006b2:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_ADC_MspInit+0xc8>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40012400 	.word	0x40012400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010800 	.word	0x40010800
 80006cc:	200002f8 	.word	0x200002f8
 80006d0:	40020008 	.word	0x40020008

080006d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a16      	ldr	r2, [pc, #88]	; (8000748 <HAL_SPI_MspInit+0x74>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d124      	bne.n	800073e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_SPI_MspInit+0x78>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_SPI_MspInit+0x78>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	61d3      	str	r3, [r2, #28]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_SPI_MspInit+0x78>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_SPI_MspInit+0x78>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <HAL_SPI_MspInit+0x78>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_SPI_MspInit+0x78>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_MOSI_Pin;
 8000724:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_SPI_MspInit+0x7c>)
 800073a:	f001 f8f9 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40003800 	.word	0x40003800
 800074c:	40021000 	.word	0x40021000
 8000750:	40010c00 	.word	0x40010c00

08000754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <HAL_TIM_Base_MspInit+0x44>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d113      	bne.n	800078e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_TIM_Base_MspInit+0x48>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0c      	ldr	r2, [pc, #48]	; (800079c <HAL_TIM_Base_MspInit+0x48>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_TIM_Base_MspInit+0x48>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	201e      	movs	r0, #30
 8000784:	f000 feaf 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000788:	201e      	movs	r0, #30
 800078a:	f000 fec8 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40000800 	.word	0x40000800
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <HardFault_Handler+0x4>

080007b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <MemManage_Handler+0x4>

080007b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <BusFault_Handler+0x4>

080007be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f9cc 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <DMA1_Channel1_IRQHandler+0x10>)
 80007fa:	f000 ff65 	bl	80016c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200002f8 	.word	0x200002f8

08000808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <TIM4_IRQHandler+0x10>)
 800080e:	f002 f92e 	bl	8002a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000288 	.word	0x20000288

0800081c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000824:	f001 f9f6 	bl	8001c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <joy_direction>:
Point joy_move(){

	return (Point){( joystick[0] - 2048) / 4, (joystick[1] - 2048) / 4};
}

void joy_direction(Point * point){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if(joystick[0] > 3500) point->x = 1;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <joy_direction+0x70>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	f640 52ac 	movw	r2, #3500	; 0xdac
 800083c:	4293      	cmp	r3, r2
 800083e:	d903      	bls.n	8000848 <joy_direction+0x1c>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	e00c      	b.n	8000862 <joy_direction+0x36>
	else if(joystick[0] < 500) point->x = -1;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <joy_direction+0x70>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000850:	d204      	bcs.n	800085c <joy_direction+0x30>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e002      	b.n	8000862 <joy_direction+0x36>
	else point->x = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]

	if(joystick[1] > 3500) point->y = 1;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <joy_direction+0x70>)
 8000864:	885b      	ldrh	r3, [r3, #2]
 8000866:	f640 52ac 	movw	r2, #3500	; 0xdac
 800086a:	4293      	cmp	r3, r2
 800086c:	d903      	bls.n	8000876 <joy_direction+0x4a>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2201      	movs	r2, #1
 8000872:	605a      	str	r2, [r3, #4]
	else if(joystick[1] < 500) point->y = -1;
	else point->y = 0;
}
 8000874:	e00c      	b.n	8000890 <joy_direction+0x64>
	else if(joystick[1] < 500) point->y = -1;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <joy_direction+0x70>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800087e:	d204      	bcs.n	800088a <joy_direction+0x5e>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f04f 32ff 	mov.w	r2, #4294967295
 8000886:	605a      	str	r2, [r3, #4]
}
 8000888:	e002      	b.n	8000890 <joy_direction+0x64>
	else point->y = 0;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	2000033c 	.word	0x2000033c

080008a0 <add_points>:


Point add_points(Point * one, Point * two){
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	return (Point){one->x + two->x, one->y + two->y};
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	18d1      	adds	r1, r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	441a      	add	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6019      	str	r1, [r3, #0]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	605a      	str	r2, [r3, #4]
}
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <lcd_set_point_p>:
	else
		display[ x + (y >> 3) * LCD_COL_SIZE] = ~((~actual) | 1 << (0x07 & y))  ;
}


void lcd_set_point_p(_Bool value, const Point * point){
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
	uint8_t actual = display[ point->x + (point->y >> 3) * LCD_COL_SIZE];
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	10db      	asrs	r3, r3, #3
 80008ea:	2154      	movs	r1, #84	; 0x54
 80008ec:	fb01 f303 	mul.w	r3, r1, r3
 80008f0:	4413      	add	r3, r2
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <lcd_set_point_p+0xa0>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	73fb      	strb	r3, [r7, #15]

	if(value)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d018      	beq.n	8000930 <lcd_set_point_p+0x5c>
		display[ point->x + (point->y >> 3) * LCD_COL_SIZE] = actual | 1 << (0x07 & point->y);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	2201      	movs	r2, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	b25a      	sxtb	r2, r3
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4313      	orrs	r3, r2
 8000914:	b258      	sxtb	r0, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	10db      	asrs	r3, r3, #3
 8000920:	2154      	movs	r1, #84	; 0x54
 8000922:	fb01 f303 	mul.w	r3, r1, r3
 8000926:	4413      	add	r3, r2
 8000928:	b2c1      	uxtb	r1, r0
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <lcd_set_point_p+0xa0>)
 800092c:	54d1      	strb	r1, [r2, r3]
	else
		display[ point->x + (point->y >> 3) * LCD_COL_SIZE] = ~((~actual) | 1 << (0x07 & point->y))  ;
}
 800092e:	e01b      	b.n	8000968 <lcd_set_point_p+0x94>
		display[ point->x + (point->y >> 3) * LCD_COL_SIZE] = ~((~actual) | 1 << (0x07 & point->y))  ;
 8000930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000934:	43db      	mvns	r3, r3
 8000936:	b25a      	sxtb	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	b25b      	sxtb	r3, r3
 8000948:	4313      	orrs	r3, r2
 800094a:	b25b      	sxtb	r3, r3
 800094c:	b2da      	uxtb	r2, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	10db      	asrs	r3, r3, #3
 8000958:	2054      	movs	r0, #84	; 0x54
 800095a:	fb00 f303 	mul.w	r3, r0, r3
 800095e:	440b      	add	r3, r1
 8000960:	43d2      	mvns	r2, r2
 8000962:	b2d1      	uxtb	r1, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <lcd_set_point_p+0xa0>)
 8000966:	54d1      	strb	r1, [r2, r3]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000038 	.word	0x20000038

08000978 <lcd_reset>:
		data++;
		*buffer++ = 0;
	}
}

void lcd_reset(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2108      	movs	r1, #8
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <lcd_reset+0x1c>)
 8000982:	f001 f92f 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <lcd_reset+0x1c>)
 800098c:	f001 f92a 	bl	8001be4 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40011000 	.word	0x40011000

08000998 <lcd_cmd>:

void lcd_cmd(uint8_t cmd){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin | LCD_DC_Pin , GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2106      	movs	r1, #6
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <lcd_cmd+0x34>)
 80009a8:	f001 f91c 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80009ac:	1df9      	adds	r1, r7, #7
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	2201      	movs	r2, #1
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <lcd_cmd+0x38>)
 80009b6:	f001 fe50 	bl	800265a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin | LCD_DC_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2106      	movs	r1, #6
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <lcd_cmd+0x34>)
 80009c0:	f001 f910 	bl	8001be4 <HAL_GPIO_WritePin>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40011000 	.word	0x40011000
 80009d0:	20000230 	.word	0x20000230

080009d4 <lcd_data>:


void lcd_data(const uint8_t* data, int size){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2102      	movs	r1, #2
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <lcd_data+0x40>)
 80009e4:	f001 f8fe 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2104      	movs	r1, #4
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <lcd_data+0x40>)
 80009ee:	f001 f8f9 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, size, HAL_MAX_DELAY);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <lcd_data+0x44>)
 80009fe:	f001 fe2c 	bl	800265a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CE_GPIO_Port, LCD_CE_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2104      	movs	r1, #4
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <lcd_data+0x40>)
 8000a08:	f001 f8ec 	bl	8001be4 <HAL_GPIO_WritePin>

}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40011000 	.word	0x40011000
 8000a18:	20000230 	.word	0x20000230

08000a1c <system_init>:

void system_init(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	lcd_reset();
 8000a20:	f7ff ffaa 	bl	8000978 <lcd_reset>
	lcd_cmd(0x21);
 8000a24:	2021      	movs	r0, #33	; 0x21
 8000a26:	f7ff ffb7 	bl	8000998 <lcd_cmd>
	lcd_cmd(0x14);
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	f7ff ffb4 	bl	8000998 <lcd_cmd>
	lcd_cmd(0x80 | 0x3f);
 8000a30:	20bf      	movs	r0, #191	; 0xbf
 8000a32:	f7ff ffb1 	bl	8000998 <lcd_cmd>
	lcd_cmd(0x20);
 8000a36:	2020      	movs	r0, #32
 8000a38:	f7ff ffae 	bl	8000998 <lcd_cmd>
	lcd_cmd(0x0c);
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f7ff ffab 	bl	8000998 <lcd_cmd>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SystemInit+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <SystemInit+0x5c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <SystemInit+0x5c>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4911      	ldr	r1, [pc, #68]	; (8000aa4 <SystemInit+0x5c>)
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SystemInit+0x60>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <SystemInit+0x5c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <SystemInit+0x5c>)
 8000a6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <SystemInit+0x5c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SystemInit+0x5c>)
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <SystemInit+0x5c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <SystemInit+0x5c>)
 8000a86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SystemInit+0x5c>)
 8000a8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SystemInit+0x64>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	f8ff0000 	.word	0xf8ff0000
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f7ff ffb7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 faf9 	bl	80030d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fb5d 	bl	800019c <main>
  bx lr
 8000ae2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ae4:	0800316c 	.word	0x0800316c
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aec:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000af0:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000af4:	20000344 	.word	0x20000344

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x28>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x28>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 fcdf 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fd42 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fcf7 	bl	800153a <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 fcbf 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000010 	.word	0x20000010
 8000b84:	2000000c 	.word	0x2000000c

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	20000340 	.word	0x20000340

08000bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000340 	.word	0x20000340

08000bc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0be      	b.n	8000d60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fd00 	bl	8000604 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 faf7 	bl	80011f8 <ADC_ConversionStop_Disable>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8099 	bne.w	8000d4e <HAL_ADC_Init+0x18e>
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8095 	bne.w	8000d4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c2c:	f023 0302 	bic.w	r3, r3, #2
 8000c30:	f043 0202 	orr.w	r2, r3, #2
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7b1b      	ldrb	r3, [r3, #12]
 8000c46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c58:	d003      	beq.n	8000c62 <HAL_ADC_Init+0xa2>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d102      	bne.n	8000c68 <HAL_ADC_Init+0xa8>
 8000c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c66:	e000      	b.n	8000c6a <HAL_ADC_Init+0xaa>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7d1b      	ldrb	r3, [r3, #20]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d119      	bne.n	8000cac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7b1b      	ldrb	r3, [r3, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d109      	bne.n	8000c94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	035a      	lsls	r2, r3, #13
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	e00b      	b.n	8000cac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f043 0220 	orr.w	r2, r3, #32
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_ADC_Init+0x1a8>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cdc:	d003      	beq.n	8000ce6 <HAL_ADC_Init+0x126>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d104      	bne.n	8000cf0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	051b      	lsls	r3, r3, #20
 8000cee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_ADC_Init+0x1ac>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d10b      	bne.n	8000d2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	f023 0303 	bic.w	r3, r3, #3
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d2a:	e018      	b.n	8000d5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	f023 0312 	bic.w	r3, r3, #18
 8000d34:	f043 0210 	orr.w	r2, r3, #16
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d40:	f043 0201 	orr.w	r2, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d4c:	e007      	b.n	8000d5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d52:	f043 0210 	orr.w	r2, r3, #16
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	ffe1f7fd 	.word	0xffe1f7fd
 8000d6c:	ff1f0efe 	.word	0xff1f0efe

08000d70 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a64      	ldr	r2, [pc, #400]	; (8000f18 <HAL_ADC_Start_DMA+0x1a8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d004      	beq.n	8000d94 <HAL_ADC_Start_DMA+0x24>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a63      	ldr	r2, [pc, #396]	; (8000f1c <HAL_ADC_Start_DMA+0x1ac>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <HAL_ADC_Start_DMA+0x32>
 8000d94:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <HAL_ADC_Start_DMA+0x1a8>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f040 80b3 	bne.w	8000f08 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_ADC_Start_DMA+0x40>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e0ae      	b.n	8000f0e <HAL_ADC_Start_DMA+0x19e>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 f9cb 	bl	8001154 <ADC_Enable>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f040 809a 	bne.w	8000efe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a4e      	ldr	r2, [pc, #312]	; (8000f1c <HAL_ADC_Start_DMA+0x1ac>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d105      	bne.n	8000df4 <HAL_ADC_Start_DMA+0x84>
 8000de8:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <HAL_ADC_Start_DMA+0x1a8>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d115      	bne.n	8000e20 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d026      	beq.n	8000e5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e1e:	e01d      	b.n	8000e5c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a39      	ldr	r2, [pc, #228]	; (8000f18 <HAL_ADC_Start_DMA+0x1a8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d004      	beq.n	8000e40 <HAL_ADC_Start_DMA+0xd0>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a38      	ldr	r2, [pc, #224]	; (8000f1c <HAL_ADC_Start_DMA+0x1ac>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d10d      	bne.n	8000e5c <HAL_ADC_Start_DMA+0xec>
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_ADC_Start_DMA+0x1a8>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f023 0206 	bic.w	r2, r3, #6
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e74:	e002      	b.n	8000e7c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <HAL_ADC_Start_DMA+0x1b0>)
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <HAL_ADC_Start_DMA+0x1b4>)
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_ADC_Start_DMA+0x1b8>)
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f06f 0202 	mvn.w	r2, #2
 8000ea4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eb4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a18      	ldr	r0, [r3, #32]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	334c      	adds	r3, #76	; 0x4c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f000 fb9f 	bl	8001608 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ed4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ed8:	d108      	bne.n	8000eec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ee8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000eea:	e00f      	b.n	8000f0c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000efa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000efc:	e006      	b.n	8000f0c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000f06:	e001      	b.n	8000f0c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012400 	.word	0x40012400
 8000f1c:	40012800 	.word	0x40012800
 8000f20:	0800126d 	.word	0x0800126d
 8000f24:	080012e9 	.word	0x080012e9
 8000f28:	08001305 	.word	0x08001305

08000f2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x20>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e0dc      	b.n	800113e <HAL_ADC_ConfigChannel+0x1da>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d81c      	bhi.n	8000fce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3b05      	subs	r3, #5
 8000fa6:	221f      	movs	r2, #31
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4019      	ands	r1, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3b05      	subs	r3, #5
 8000fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
 8000fcc:	e03c      	b.n	8001048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b0c      	cmp	r3, #12
 8000fd4:	d81c      	bhi.n	8001010 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b23      	subs	r3, #35	; 0x23
 8000fe8:	221f      	movs	r2, #31
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4019      	ands	r1, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	3b23      	subs	r3, #35	; 0x23
 8001002:	fa00 f203 	lsl.w	r2, r0, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
 800100e:	e01b      	b.n	8001048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	3b41      	subs	r3, #65	; 0x41
 8001022:	221f      	movs	r2, #31
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b41      	subs	r3, #65	; 0x41
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b09      	cmp	r3, #9
 800104e:	d91c      	bls.n	800108a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68d9      	ldr	r1, [r3, #12]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	3b1e      	subs	r3, #30
 8001062:	2207      	movs	r2, #7
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	4019      	ands	r1, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6898      	ldr	r0, [r3, #8]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	3b1e      	subs	r3, #30
 800107c:	fa00 f203 	lsl.w	r2, r0, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	e019      	b.n	80010be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6919      	ldr	r1, [r3, #16]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	2207      	movs	r2, #7
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6898      	ldr	r0, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d003      	beq.n	80010ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d132      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_ADC_ConfigChannel+0x1e4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d125      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d126      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d11a      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_ConfigChannel+0x1e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_ADC_ConfigChannel+0x1ec>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	0c9a      	lsrs	r2, r3, #18
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001114:	e002      	b.n	800111c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3b01      	subs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x1b2>
 8001122:	e007      	b.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f043 0220 	orr.w	r2, r3, #32
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40012400 	.word	0x40012400
 800114c:	20000008 	.word	0x20000008
 8001150:	431bde83 	.word	0x431bde83

08001154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d039      	beq.n	80011e6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <ADC_Enable+0x9c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <ADC_Enable+0xa0>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0c9b      	lsrs	r3, r3, #18
 800118e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001190:	e002      	b.n	8001198 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	3b01      	subs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800119e:	f7ff fd05 	bl	8000bac <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011a4:	e018      	b.n	80011d8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011a6:	f7ff fd01 	bl	8000bac <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d911      	bls.n	80011d8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f043 0210 	orr.w	r2, r3, #16
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e007      	b.n	80011e8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d1df      	bne.n	80011a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b01      	cmp	r3, #1
 8001210:	d127      	bne.n	8001262 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0201 	bic.w	r2, r2, #1
 8001220:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001222:	f7ff fcc3 	bl	8000bac <HAL_GetTick>
 8001226:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001228:	e014      	b.n	8001254 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800122a:	f7ff fcbf 	bl	8000bac <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d90d      	bls.n	8001254 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f043 0210 	orr.w	r2, r3, #16
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e007      	b.n	8001264 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b01      	cmp	r3, #1
 8001260:	d0e3      	beq.n	800122a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001282:	2b00      	cmp	r3, #0
 8001284:	d127      	bne.n	80012d6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800129c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012a0:	d115      	bne.n	80012ce <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d111      	bne.n	80012ce <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff fe2c 	bl	8000f2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012d4:	e004      	b.n	80012e0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4798      	blx	r3
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff fe21 	bl	8000f3e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f043 0204 	orr.w	r2, r3, #4
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fe10 	bl	8000f50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <__NVIC_EnableIRQ+0x34>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff90 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff2d 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff42 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff90 	bl	8001428 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5f 	bl	80013d4 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff35 	bl	800139c <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e043      	b.n	80015f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_DMA_Init+0xa8>)
 8001572:	4413      	add	r3, r2
 8001574:	4a22      	ldr	r2, [pc, #136]	; (8001600 <HAL_DMA_Init+0xac>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	009a      	lsls	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_DMA_Init+0xb0>)
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800159e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	bffdfff8 	.word	0xbffdfff8
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Start_IT+0x20>
 8001624:	2302      	movs	r3, #2
 8001626:	e04a      	b.n	80016be <HAL_DMA_Start_IT+0xb6>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001636:	2b01      	cmp	r3, #1
 8001638:	d13a      	bne.n	80016b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f938 	bl	80018d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 020e 	orr.w	r2, r2, #14
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e00f      	b.n	800169e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0204 	bic.w	r2, r2, #4
 800168c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 020a 	orr.w	r2, r2, #10
 800169c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0201 	orr.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e005      	b.n	80016bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
 80016ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2204      	movs	r2, #4
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d04f      	beq.n	8001790 <HAL_DMA_IRQHandler+0xc8>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d04a      	beq.n	8001790 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a66      	ldr	r2, [pc, #408]	; (80018b8 <HAL_DMA_IRQHandler+0x1f0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d029      	beq.n	8001776 <HAL_DMA_IRQHandler+0xae>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_DMA_IRQHandler+0x1f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d022      	beq.n	8001772 <HAL_DMA_IRQHandler+0xaa>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0xa4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a62      	ldr	r2, [pc, #392]	; (80018c4 <HAL_DMA_IRQHandler+0x1fc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d012      	beq.n	8001766 <HAL_DMA_IRQHandler+0x9e>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a60      	ldr	r2, [pc, #384]	; (80018c8 <HAL_DMA_IRQHandler+0x200>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00a      	beq.n	8001760 <HAL_DMA_IRQHandler+0x98>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a5f      	ldr	r2, [pc, #380]	; (80018cc <HAL_DMA_IRQHandler+0x204>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <HAL_DMA_IRQHandler+0x92>
 8001754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001758:	e00e      	b.n	8001778 <HAL_DMA_IRQHandler+0xb0>
 800175a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800175e:	e00b      	b.n	8001778 <HAL_DMA_IRQHandler+0xb0>
 8001760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001764:	e008      	b.n	8001778 <HAL_DMA_IRQHandler+0xb0>
 8001766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176a:	e005      	b.n	8001778 <HAL_DMA_IRQHandler+0xb0>
 800176c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001770:	e002      	b.n	8001778 <HAL_DMA_IRQHandler+0xb0>
 8001772:	2340      	movs	r3, #64	; 0x40
 8001774:	e000      	b.n	8001778 <HAL_DMA_IRQHandler+0xb0>
 8001776:	2304      	movs	r3, #4
 8001778:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_DMA_IRQHandler+0x208>)
 800177a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8094 	beq.w	80018ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800178e:	e08e      	b.n	80018ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2202      	movs	r2, #2
 8001796:	409a      	lsls	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d056      	beq.n	800184e <HAL_DMA_IRQHandler+0x186>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d051      	beq.n	800184e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10b      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 020a 	bic.w	r2, r2, #10
 80017c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <HAL_DMA_IRQHandler+0x1f0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d029      	beq.n	800182e <HAL_DMA_IRQHandler+0x166>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a37      	ldr	r2, [pc, #220]	; (80018bc <HAL_DMA_IRQHandler+0x1f4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_IRQHandler+0x162>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a35      	ldr	r2, [pc, #212]	; (80018c0 <HAL_DMA_IRQHandler+0x1f8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01a      	beq.n	8001824 <HAL_DMA_IRQHandler+0x15c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <HAL_DMA_IRQHandler+0x1fc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d012      	beq.n	800181e <HAL_DMA_IRQHandler+0x156>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <HAL_DMA_IRQHandler+0x200>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00a      	beq.n	8001818 <HAL_DMA_IRQHandler+0x150>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a31      	ldr	r2, [pc, #196]	; (80018cc <HAL_DMA_IRQHandler+0x204>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d102      	bne.n	8001812 <HAL_DMA_IRQHandler+0x14a>
 800180c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001810:	e00e      	b.n	8001830 <HAL_DMA_IRQHandler+0x168>
 8001812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001816:	e00b      	b.n	8001830 <HAL_DMA_IRQHandler+0x168>
 8001818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181c:	e008      	b.n	8001830 <HAL_DMA_IRQHandler+0x168>
 800181e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001822:	e005      	b.n	8001830 <HAL_DMA_IRQHandler+0x168>
 8001824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001828:	e002      	b.n	8001830 <HAL_DMA_IRQHandler+0x168>
 800182a:	2320      	movs	r3, #32
 800182c:	e000      	b.n	8001830 <HAL_DMA_IRQHandler+0x168>
 800182e:	2302      	movs	r3, #2
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_DMA_IRQHandler+0x208>)
 8001832:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d034      	beq.n	80018ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800184c:	e02f      	b.n	80018ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2208      	movs	r2, #8
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d028      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x1e8>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 020e 	bic.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
    }
  }
  return;
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
}
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020008 	.word	0x40020008
 80018bc:	4002001c 	.word	0x4002001c
 80018c0:	40020030 	.word	0x40020030
 80018c4:	40020044 	.word	0x40020044
 80018c8:	40020058 	.word	0x40020058
 80018cc:	4002006c 	.word	0x4002006c
 80018d0:	40020000 	.word	0x40020000

080018d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d108      	bne.n	8001914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001912:	e007      	b.n	8001924 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e127      	b.n	8001b94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8116 	bne.w	8001b8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d034      	beq.n	80019d4 <HAL_GPIO_Init+0xa4>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d80d      	bhi.n	800198a <HAL_GPIO_Init+0x5a>
 800196e:	2b02      	cmp	r3, #2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x9a>
 8001972:	2b02      	cmp	r3, #2
 8001974:	d804      	bhi.n	8001980 <HAL_GPIO_Init+0x50>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d031      	beq.n	80019de <HAL_GPIO_Init+0xae>
 800197a:	2b01      	cmp	r3, #1
 800197c:	d01c      	beq.n	80019b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800197e:	e048      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001980:	2b03      	cmp	r3, #3
 8001982:	d043      	beq.n	8001a0c <HAL_GPIO_Init+0xdc>
 8001984:	2b11      	cmp	r3, #17
 8001986:	d01b      	beq.n	80019c0 <HAL_GPIO_Init+0x90>
          break;
 8001988:	e043      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800198a:	4a89      	ldr	r2, [pc, #548]	; (8001bb0 <HAL_GPIO_Init+0x280>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d026      	beq.n	80019de <HAL_GPIO_Init+0xae>
 8001990:	4a87      	ldr	r2, [pc, #540]	; (8001bb0 <HAL_GPIO_Init+0x280>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d806      	bhi.n	80019a4 <HAL_GPIO_Init+0x74>
 8001996:	4a87      	ldr	r2, [pc, #540]	; (8001bb4 <HAL_GPIO_Init+0x284>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d020      	beq.n	80019de <HAL_GPIO_Init+0xae>
 800199c:	4a86      	ldr	r2, [pc, #536]	; (8001bb8 <HAL_GPIO_Init+0x288>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01d      	beq.n	80019de <HAL_GPIO_Init+0xae>
          break;
 80019a2:	e036      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a4:	4a85      	ldr	r2, [pc, #532]	; (8001bbc <HAL_GPIO_Init+0x28c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_GPIO_Init+0xae>
 80019aa:	4a85      	ldr	r2, [pc, #532]	; (8001bc0 <HAL_GPIO_Init+0x290>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d016      	beq.n	80019de <HAL_GPIO_Init+0xae>
 80019b0:	4a84      	ldr	r2, [pc, #528]	; (8001bc4 <HAL_GPIO_Init+0x294>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0xae>
          break;
 80019b6:	e02c      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e028      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e023      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	3308      	adds	r3, #8
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e01e      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	330c      	adds	r3, #12
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e019      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e6:	2304      	movs	r3, #4
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e012      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2308      	movs	r3, #8
 80019f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	611a      	str	r2, [r3, #16]
          break;
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	615a      	str	r2, [r3, #20]
          break;
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d801      	bhi.n	8001a1c <HAL_GPIO_Init+0xec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	e001      	b.n	8001a20 <HAL_GPIO_Init+0xf0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d802      	bhi.n	8001a2e <HAL_GPIO_Init+0xfe>
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x104>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	3b08      	subs	r3, #8
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	6a39      	ldr	r1, [r7, #32]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8096 	beq.w	8001b8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_GPIO_Init+0x298>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_GPIO_Init+0x298>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_GPIO_Init+0x298>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a7a:	4a54      	ldr	r2, [pc, #336]	; (8001bcc <HAL_GPIO_Init+0x29c>)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <HAL_GPIO_Init+0x2a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x19e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <HAL_GPIO_Init+0x2a4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x19a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a49      	ldr	r2, [pc, #292]	; (8001bd8 <HAL_GPIO_Init+0x2a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x196>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a48      	ldr	r2, [pc, #288]	; (8001bdc <HAL_GPIO_Init+0x2ac>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x192>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x1a0>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae0:	493a      	ldr	r1, [pc, #232]	; (8001bcc <HAL_GPIO_Init+0x29c>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4938      	ldr	r1, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4933      	ldr	r1, [pc, #204]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	492e      	ldr	r1, [pc, #184]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	4924      	ldr	r1, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	491f      	ldr	r1, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	491a      	ldr	r1, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60cb      	str	r3, [r1, #12]
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4915      	ldr	r1, [pc, #84]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f aed0 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	372c      	adds	r7, #44	; 0x2c
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	10210000 	.word	0x10210000
 8001bb4:	10110000 	.word	0x10110000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	10310000 	.word	0x10310000
 8001bc0:	10320000 	.word	0x10320000
 8001bc4:	10220000 	.word	0x10220000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f806 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e26c      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c78:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d00c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c84:	4b8f      	ldr	r3, [pc, #572]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d112      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5e>
 8001c90:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9e:	4b89      	ldr	r3, [pc, #548]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d06c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x12c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d168      	bne.n	8001d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e246      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x76>
 8001cc0:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7f      	ldr	r2, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e02e      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x98>
 8001cd6:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7a      	ldr	r2, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0xbc>
 8001cfa:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001d14:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe ff3a 	bl	8000bac <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7fe ff36 	bl	8000bac <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1fa      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe4>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe ff26 	bl	8000bac <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7fe ff22 	bl	8000bac <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1e6      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x10c>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x18c>
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x176>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1ba      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4939      	ldr	r1, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fedb 	bl	8000bac <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7fe fed7 	bl	8000bac <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e19b      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4927      	ldr	r1, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe feba 	bl	8000bac <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7fe feb6 	bl	8000bac <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e17a      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d03a      	beq.n	8001edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d019      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fe9a 	bl	8000bac <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7fe fe96 	bl	8000bac <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e15a      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f000 faa8 	bl	80023f0 <RCC_Delay>
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7fe fe80 	bl	8000bac <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7fe fe7c 	bl	8000bac <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d908      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e140      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	42420000 	.word	0x42420000
 8001ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b9e      	ldr	r3, [pc, #632]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e9      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a6 	beq.w	8002036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b97      	ldr	r3, [pc, #604]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10d      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b94      	ldr	r3, [pc, #592]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a93      	ldr	r2, [pc, #588]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b91      	ldr	r3, [pc, #580]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d118      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fe3d 	bl	8000bac <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7fe fe39 	bl	8000bac <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b64      	cmp	r3, #100	; 0x64
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0fd      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b81      	ldr	r3, [pc, #516]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x312>
 8001f5c:	4b7b      	ldr	r3, [pc, #492]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a7a      	ldr	r2, [pc, #488]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e02d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x334>
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a72      	ldr	r2, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	e01c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x356>
 8001f94:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a6c      	ldr	r2, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a66      	ldr	r2, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fded 	bl	8000bac <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fde9 	bl	8000bac <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0ab      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ee      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x37e>
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fdd7 	bl	8000bac <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe fdd3 	bl	8000bac <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e095      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b48      	ldr	r3, [pc, #288]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8081 	beq.w	8002142 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b42      	ldr	r3, [pc, #264]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d061      	beq.n	8002110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d146      	bne.n	80020e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_OscConfig+0x4fc>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fda7 	bl	8000bac <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe fda3 	bl	8000bac <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e067      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	492d      	ldr	r1, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a19      	ldr	r1, [r3, #32]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	430b      	orrs	r3, r1
 80020ae:	4927      	ldr	r1, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x4fc>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fd77 	bl	8000bac <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7fe fd73 	bl	8000bac <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e037      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46a>
 80020e0:	e02f      	b.n	8002142 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_RCC_OscConfig+0x4fc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fd60 	bl	8000bac <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fd5c 	bl	8000bac <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e020      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x498>
 800210e:	e018      	b.n	8002142 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e013      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	429a      	cmp	r2, r3
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
 8002154:	42420060 	.word	0x42420060

08002158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d0      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4965      	ldr	r1, [pc, #404]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b8      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494d      	ldr	r1, [pc, #308]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d040      	beq.n	8002278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07f      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e073      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e06b      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4936      	ldr	r1, [pc, #216]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002248:	f7fe fcb0 	bl	8000bac <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7fe fcac 	bl	8000bac <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e053      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d210      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4922      	ldr	r1, [pc, #136]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e032      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4916      	ldr	r1, [pc, #88]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f821 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ea:	4601      	mov	r1, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	fa21 f303 	lsr.w	r3, r1, r3
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1cc>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fc0e 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	08003154 	.word	0x08003154
 8002324:	20000008 	.word	0x20000008
 8002328:	2000000c 	.word	0x2000000c

0800232c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b490      	push	{r4, r7}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002334:	1d3c      	adds	r4, r7, #4
 8002336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x40>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x46>
 800236a:	e02d      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800236e:	623b      	str	r3, [r7, #32]
      break;
 8002370:	e02d      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800237e:	4413      	add	r3, r2
 8002380:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002384:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0c5b      	lsrs	r3, r3, #17
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800239e:	4413      	add	r3, r2
 80023a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023aa:	fb02 f203 	mul.w	r2, r2, r3
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	623b      	str	r3, [r7, #32]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ca:	623b      	str	r3, [r7, #32]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc90      	pop	{r4, r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	08003140 	.word	0x08003140
 80023e0:	08003150 	.word	0x08003150
 80023e4:	40021000 	.word	0x40021000
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <RCC_Delay+0x34>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <RCC_Delay+0x38>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0a5b      	lsrs	r3, r3, #9
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800240c:	bf00      	nop
  }
  while (Delay --);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	60fa      	str	r2, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <RCC_Delay+0x1c>
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d07d      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244c:	4b4f      	ldr	r3, [pc, #316]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	61d3      	str	r3, [r2, #28]
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d118      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a42      	ldr	r2, [pc, #264]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7fe fb8e 	bl	8000bac <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	e008      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe fb8a 	bl	8000bac <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e06d      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d02e      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d027      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024e6:	4a29      	ldr	r2, [pc, #164]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d014      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fb59 	bl	8000bac <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fb55 	bl	8000bac <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e036      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4917      	ldr	r1, [pc, #92]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252e:	4313      	orrs	r3, r2
 8002530:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002542:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	490b      	ldr	r1, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4904      	ldr	r1, [pc, #16]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	42420440 	.word	0x42420440

08002598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e053      	b.n	8002652 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe f885 	bl	80006d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	ea42 0103 	orr.w	r1, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	0c1a      	lsrs	r2, r3, #16
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 0204 	and.w	r2, r2, #4
 8002630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b088      	sub	sp, #32
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_SPI_Transmit+0x22>
 8002678:	2302      	movs	r3, #2
 800267a:	e11e      	b.n	80028ba <HAL_SPI_Transmit+0x260>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002684:	f7fe fa92 	bl	8000bac <HAL_GetTick>
 8002688:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800269e:	e103      	b.n	80028a8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_Transmit+0x52>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026b0:	e0fa      	b.n	80028a8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f8:	d107      	bne.n	800270a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002708:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d007      	beq.n	8002728 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002730:	d14b      	bne.n	80027ca <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_SPI_Transmit+0xe6>
 800273a:	8afb      	ldrh	r3, [r7, #22]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d13e      	bne.n	80027be <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	1c9a      	adds	r2, r3, #2
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002764:	e02b      	b.n	80027be <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b02      	cmp	r3, #2
 8002772:	d112      	bne.n	800279a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	1c9a      	adds	r2, r3, #2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	86da      	strh	r2, [r3, #54]	; 0x36
 8002798:	e011      	b.n	80027be <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800279a:	f7fe fa07 	bl	8000bac <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d803      	bhi.n	80027b2 <HAL_SPI_Transmit+0x158>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d102      	bne.n	80027b8 <HAL_SPI_Transmit+0x15e>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027bc:	e074      	b.n	80028a8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ce      	bne.n	8002766 <HAL_SPI_Transmit+0x10c>
 80027c8:	e04c      	b.n	8002864 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_Transmit+0x17e>
 80027d2:	8afb      	ldrh	r3, [r7, #22]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d140      	bne.n	800285a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027fe:	e02c      	b.n	800285a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d113      	bne.n	8002836 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	86da      	strh	r2, [r3, #54]	; 0x36
 8002834:	e011      	b.n	800285a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002836:	f7fe f9b9 	bl	8000bac <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d803      	bhi.n	800284e <HAL_SPI_Transmit+0x1f4>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d102      	bne.n	8002854 <HAL_SPI_Transmit+0x1fa>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002858:	e026      	b.n	80028a8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1cd      	bne.n	8002800 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f894 	bl	8002996 <SPI_EndRxTxTransaction>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	77fb      	strb	r3, [r7, #31]
 80028a4:	e000      	b.n	80028a8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80028a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	e04c      	b.n	800296e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d048      	beq.n	800296e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028dc:	f7fe f966 	bl	8000bac <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d111      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d004      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291e:	d107      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d10f      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e00f      	b.n	800298e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	429a      	cmp	r2, r3
 800298a:	d1a3      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af02      	add	r7, sp, #8
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff88 	bl	80028c2 <SPI_WaitFlagStateUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e000      	b.n	80029ca <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e01d      	b.n	8002a20 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fd feab 	bl	8000754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 fa0f 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d007      	beq.n	8002a62 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d122      	bne.n	8002aca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d11b      	bne.n	8002aca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0202 	mvn.w	r2, #2
 8002a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9a4 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002ab6:	e005      	b.n	8002ac4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f997 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9a6 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d122      	bne.n	8002b1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d11b      	bne.n	8002b1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0204 	mvn.w	r2, #4
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f97a 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e005      	b.n	8002b18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f96d 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f97c 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d122      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11b      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0208 	mvn.w	r2, #8
 8002b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f950 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002b5e:	e005      	b.n	8002b6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f943 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f952 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d122      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0210 	mvn.w	r2, #16
 8002b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f926 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002bb2:	e005      	b.n	8002bc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f919 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f928 	bl	8002e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0201 	mvn.w	r2, #1
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fd faad 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d10e      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa50 	bl	80030be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d10e      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f8ec 	bl	8002e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d10e      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d107      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0220 	mvn.w	r2, #32
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fa1b 	bl	80030ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_ConfigClockSource+0x18>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0a6      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x166>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cb4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cbc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d067      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x120>
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d80b      	bhi.n	8002cea <HAL_TIM_ConfigClockSource+0x6c>
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d073      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x140>
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d802      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x62>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06f      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002cde:	e078      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d06c      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x140>
 8002ce4:	2b30      	cmp	r3, #48	; 0x30
 8002ce6:	d06a      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ce8:	e073      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cea:	2b70      	cmp	r3, #112	; 0x70
 8002cec:	d00d      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x8c>
 8002cee:	2b70      	cmp	r3, #112	; 0x70
 8002cf0:	d804      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x7e>
 8002cf2:	2b50      	cmp	r3, #80	; 0x50
 8002cf4:	d033      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0xe0>
 8002cf6:	2b60      	cmp	r3, #96	; 0x60
 8002cf8:	d041      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cfa:	e06a      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d00:	d066      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0x152>
 8002d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d06:	d017      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d08:	e063      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f000 f964 	bl	8002fe6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
      break;
 8002d36:	e04c      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f000 f94d 	bl	8002fe6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5a:	609a      	str	r2, [r3, #8]
      break;
 8002d5c:	e039      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 f8c4 	bl	8002ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2150      	movs	r1, #80	; 0x50
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f91b 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e029      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 f8e2 	bl	8002f54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2160      	movs	r1, #96	; 0x60
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f90b 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e019      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 f8a4 	bl	8002ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f8fb 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e009      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 f8f2 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002dce:	e000      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a29      	ldr	r2, [pc, #164]	; (8002eec <TIM_Base_SetConfig+0xb8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <TIM_Base_SetConfig+0x30>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0x30>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <TIM_Base_SetConfig+0xbc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0x30>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <TIM_Base_SetConfig+0xc0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <TIM_Base_SetConfig+0xb8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <TIM_Base_SetConfig+0xbc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <TIM_Base_SetConfig+0xc0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <TIM_Base_SetConfig+0xb8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d103      	bne.n	8002edc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800

08002ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0201 	bic.w	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 030a 	bic.w	r3, r3, #10
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f023 0210 	bic.w	r2, r3, #16
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	031b      	lsls	r3, r3, #12
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	621a      	str	r2, [r3, #32]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 0307 	orr.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003000:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	431a      	orrs	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	609a      	str	r2, [r3, #8]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e032      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003074:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <__libc_init_array>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	2500      	movs	r5, #0
 80030d4:	4e0c      	ldr	r6, [pc, #48]	; (8003108 <__libc_init_array+0x38>)
 80030d6:	4c0d      	ldr	r4, [pc, #52]	; (800310c <__libc_init_array+0x3c>)
 80030d8:	1ba4      	subs	r4, r4, r6
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	42a5      	cmp	r5, r4
 80030de:	d109      	bne.n	80030f4 <__libc_init_array+0x24>
 80030e0:	f000 f822 	bl	8003128 <_init>
 80030e4:	2500      	movs	r5, #0
 80030e6:	4e0a      	ldr	r6, [pc, #40]	; (8003110 <__libc_init_array+0x40>)
 80030e8:	4c0a      	ldr	r4, [pc, #40]	; (8003114 <__libc_init_array+0x44>)
 80030ea:	1ba4      	subs	r4, r4, r6
 80030ec:	10a4      	asrs	r4, r4, #2
 80030ee:	42a5      	cmp	r5, r4
 80030f0:	d105      	bne.n	80030fe <__libc_init_array+0x2e>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f8:	4798      	blx	r3
 80030fa:	3501      	adds	r5, #1
 80030fc:	e7ee      	b.n	80030dc <__libc_init_array+0xc>
 80030fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003102:	4798      	blx	r3
 8003104:	3501      	adds	r5, #1
 8003106:	e7f2      	b.n	80030ee <__libc_init_array+0x1e>
 8003108:	08003164 	.word	0x08003164
 800310c:	08003164 	.word	0x08003164
 8003110:	08003164 	.word	0x08003164
 8003114:	08003168 	.word	0x08003168

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <_init>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr

08003134 <_fini>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr
